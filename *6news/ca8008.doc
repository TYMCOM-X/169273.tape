


 





                             CA8008

                  BSO Absolute Cross Assembler
                     (with Cross Reference)

                               for

                  8080/8008 Microprocessors by

                              INTEL
                  (and all compatible devices)

                               on

                         TYMSHARE, INC.










          This user's manual is intended as a  thorough
          product  description.   It is, to the best of
          our knowledge, complete and accurate.

          The Boston Systems Office does not,  however,
          warrant  this  document's accuracy, nor shall
          it be held responsible for errors of  content
          or   omission.   The  Boston  Systems  Office
          reserves the right to  update  this  document
          without prior notification.




         Copyright, THE BOSTON SYSTEMS OFFICE, INC. 1979
                        469 MOODY STREET
                       WALTHAM, MA  02154
                         (617) 894-7800


                     Updated August 22, 1980
                                                           Page 2


                       GENERAL INFORMATION

The Boston Systems Office offers a family of extremely  effective
microprocessor   software   development  tools.   These  products
(cross-assembler, cross-compilers, simulator/debuggers, and other
products)  allow the user to take full advantage of the speed and
versatility of  microprocessor  program  development  on  a  host
computer,  thereby  significantly reducing the number of hours or
days spent in program development.   The  advantages  of  a  host
system  versus  a  microprocessor-based  development  programming
system include:

          - Faster processing speeds
          - More powerful editors
          - Multi-user capability
          - Higher speed peripherals
          - Multi-microprocessor capability on one system
          - Lower station cost in multi-user configurations

BSO/PASCAL is a new product of the BSO line  of  cross-compilers,
which has been specially optimized for microprocessor application
design.  Its benefits include faster software development through
the  use of a high-level language and a much higher percentage of
error-free code  because  of  PASCAL's  particular  capabilities.
Other advantages are simplified program maintenance due to better
program readability and a  recompilation  capability  which  will
permit  one source language program to be compiled for any number
of  suitable  microprocessors.   BSO/PASCAL  supports   interrupt
handling   instructions,   record-oriented   variables,  enhanced
microprocessor statements, extensive compiler-generated  comments
and many other features.

BSO's cross assemblers, unlike most other similar  products,  are
written  in  the  assembly  language  of the host computer.  They
generally require no more than 10-18K words of memory to assemble
any  program.   The  comprehensive  program  symbol  table can be
expanded for any program requirement or selectively condensed for
a  smaller  system,  as  required.  These assemblers require much
less  CPU  time  to  execute,  even  at   this   reduced   memory
requirement,  than manufacturer-supplied cross-assemblers written
in higher-level languages such as  Fortran.   Benchmarks  against
competitive  cross-assemblers  in  a timesharing environment have
shown that time  savings  of  up  to  50%  are  common.   Similar
efficiencies   can  also  be  realized  when  using  an  in-house
computer.

                                                           Page 3


The instruction set accepted by each cross-assembler is the  same
as  documented  in  the  assembly language manual supplied by the
microprocessor   manufacturer.    Mnemonics   exist   for    data
manipulation,  binary  arithmetic, jumps to subroutines, etc.  In
addition, all of  BSO's  cross-assemblers  have  full  macro  and
extended  conditional  assembly  capabilities.   The  object file
produced can then be processed by BSO's compatible  cross-linkage
editor, along with other relocatable and absolute object modules.
The assembled code can then be loaded directly  to  any  standard
peripheral  device  on  the  system.   The  absolute  load module
produced by the cross-linkage editor  can  be  punched  on  paper
tape,  loaded into a PROM burner, or downline loaded into memory,
depending on the available facilities.   The  assembler  is  also
capable  of  producing  an  object  format with additional symbol
information,  suitable  for  input  to  one  of  BSO's  companion
integrated symbolic simulator/debuggers.

Cross assemblers are now available for  all  major  manufacturers
including   Advanced   MicroDevices,   AMI,  Fairchild,  Fujitsu,
Hitachi,  Intel,  Intersil,  MOS  Technology,  Mostek,  Motorola,
National  Semiconductor, NEC, RCA, Rockwell, Signetics, Synertek,
Thomson-CSF, Texas Instruments, Zilog and others.

Please feel free to call  the  sales  department  of  the  Boston
Systems  Office  at (617) 894-7800 for further information on any
microprocessor including those not mentioned above.
                                                           Page 4


                        TABLE OF CONTENTS

Section   Contents

1.0       OPERATING INSTRUCTIONS
1.1       Using the Listing and Object files
1.2       Switch Summary
1.3       Listing Options
1.3.1          Omit Symbol Table (/T)
1.3.2          Cross-Reference Mode (/X)
1.4       Object file options
1.4.1          Debugger Support (/D)
1.5       Sample Commands

2.0       SOURCE PROGRAM PREPARATION
2.1       Program Entry
2.2       Program Format
2.2.1          Label Field
2.2.2          Instruction Field
2.2.3          Operand Field
2.2.4          Comment Field
2.3       Expressions
2.3.1          Symbols
2.3.2          Numeric Constants
2.3.3          ASCII Constants
2.3.4          Expression Operators

3.0       INSTRUCTION SET

4.0       ASSEMBLER DIRECTIVES (PSEUDO-OPS)
4.1       Conditional Assembly
4.2       The BSO Macro Facility
4.2.1          Nesting Of Macros
4.3       Listing Control
4.3.1          TITLE
4.3.2          EJECT

                           (continued)
                                                           Page 5


                  TABLE OF CONTENTS (continued)

Section   Contents


5.0       OBJECT FILE FORMAT
5.1       Standard Absolute Object file 

6.0       ERROR HANDLING

7.0       SUMMARY OF DIFFERENCES

APPENDICES:
I.        HOW TO REPORT DOCUMENTATION AND SOFTWARE PROBLEMS
II.       PROBLEM AND SUGGESTION REPORT
          correction report)
                                                           Page 6


1.0 OPERATING INSTRUCTIONS

To run the 8008 cross assembler, at the monitor  (system)  level,
type:

     -R CA8008

The assembler will respond with the following:

     8008 Cross Assembler version 3A(44)
     Copyright, The Boston Systems Office, Inc. 1979
     (617) 894-7800
     Type "/H" for help
     *

By typing "*", the  assembler  is  indicating  its  readiness  to
accept  a  command  and perform an assembly.  To this prompt, you
should type a command of the form

*PROG.OBJ,PROG.LST=PROG.SRC/X/Y...

The filenames shown above (PROG.OBJ, PROG.LST, PROG.SRC) are used
for example purposes only, and any acceptable file specifications
may be used.

PROG.OBJ and PROG.LST are the names of the object and list  files
the assembler will create, respectively.  If either of these file
specifications is  omitted,  the  associated  file  will  not  be
generated.

If a list file is desired without an  object  file,  the  command
string  should  start  with  a  comma,  followed by the list file
specification, i.e., if only the  object  file  is  omitted,  its
trailing comma must still be included.

If only an object file is desired, without a list  file,  neither
the comma nor the list file specification need appear on the left
side of the "=" sign in  the  command  string  (see  examples  in
section 1.5).

The source program to be assembled is specified on the right side
of the "=" sign.  A source file is always required.

The source file is optionally  followed  by  "switches"  for  the
command string.  These take the form of a slash "/" followed by a
single letter (shown in the above example by "/X and /Y"), and as
many of these may be specified as desired (including none).  Each
switch slightly modifies the operation  of  the  assembler.   The
available switches are detailed in section 1.2.

If extensions are omitted from the  file  specifications  in  the
command string, the following assumed default extensions apply:

Object file     .OBJ
List file       .LST
Source file     .SRC
                                                           Page 7


1.1 USING THE LISTING AND OBJECT FILES

The listing and object files created are in ASCII formats and may
be   printed  or  punched  by  using  standard  operating  system
commands.  Any normal system commands may also be  used  to  move
these  files from device to device.  Consult your computer system
user's guide for more details.



1.2 SWITCH SUMMARY

The following switches are available in this assembler:

     /H  "Help".  Ignore command line and print helpful
         information.
     /N  Do not print assembly errors on user's terminal
     /P  Indicate the start of pass 2 on the terminal
     /T  No symbol table in listing (see section 1.4)
     /D  Debug switch; include symbol information in object file
         (for use by BSO symbolic simulator/debuggers)
     /X  Cross reference mode.  Produces a symbol table in the
         list file which includes cross reference information.
                                                           Page 8


1.3 LISTING OPTIONS

1.3.1 OMIT SYMBOL TABLE (/T)

The listing normally contains a table of user symbols  and  their
values.   This  table  can  be  omitted  by  specifying /T in the
command line.

1.3.2 CROSS-REFERENCE MODE (/X)

By adding the /X switch to the end of  the  command  string,  the
user  instructs the assembler to operate in cross-reference mode.
In this mode, the symbol table produced contains, in addition  to
the symbol names and values, the cross reference information.



1.4 OBJECT FILE OPTIONS

1.4.1 DEBUGGER SUPPORT (/D)

When the user adds the /D  switch  to  the  end  of  the  command
string,  the  assembler  includes  its symbol table in the object
module.  This symbol table is subsequently read by BSO's symbolic
simulator/debugger,  which  then  has access to the user's symbol
definitions.

This information is merely appended to the end  of  the  absolute
load  module  (object  file)  generated  by  the  assembler.  The
simulator recognizes the sepcially formated  information  at  the
end  of the file and loads the and loads the symbols accordingly.
Note that this information may or may not be considered a serious
error   by  various  manufacturer-supplied  loaders  and/or  PROM
burners.
                                                           Page 9


1.5 SAMPLE COMMANDS

The following examples are provided as illustrations of the sorts
of  commands normally given to the assembler.  Commentary text is
provided with each one.   Only  the  command  strings  are  shown
below;   note  that  they  are  always  typed  in response to the
assembler's prompt, "*".

     A.OBJ,A.LST=A.SRC
          Assemble source  file  A.SRC,  generating  object  file
          A.OBJ  and  list file A.LST.  The object and list files
          are in standard format.  Assembly errors appear on  the
          user's terminal and in the list file.

     A,A=A
          Same  effect  as  above  command  string,  because   of
          defaults.

     A=A
          Assemble source  file  A.SRC,  generating  object  file
          A.OBJ.  No list file is generated.  Erroneous lines are
          printed on the user's terminal.

     ,A=A
          Assemble source file A.SRC, generating list file A.LST.
          No  object  file.   Assembly  errors appear both in the
          list file and on the user's terminal.

     FOO,BAR=PROG/X/N
          Assemble source  program  PROG.SRC,  generating  object
          file FOO.OBJ and cross reference of symbols in the list
          file BAR.LST.  Erroneous lines appear only in the  list
          file;  they are not typed on the user's terminal.
                                                          Page 10


2.0 SOURCE PROGRAM PREPARATION

2.1 PROGRAM ENTRY

In general, source programs for this assembler are placed on  the
host  computer  disk either by use of a text editor program or by
copying an existing source program from paper tape, punch  cards,
magnetic  tape,  etc.   Once  a  program  resides on disk, a text
editor program can be used  to  alter  or  correct  the  file  in
preparation  for  assembly.  Consult the operating system manuals
supplied with your computer for further  information  on  copying
and editing files on your system.

2.2 PROGRAM FORMAT

Each source program for the 8008 consists  of  several  lines  of
ASCII   characters.   Each  line  must  be  no  longer  than  132
characters;  longer lines will be truncated and produce a warning
message from the assembler.

Lines beginning  with  a  semicolon  (";")  will  be  treated  as
comments.   Blank  lines  will  be  ignored.   Each  source  line
(statement) consists of four parts or "fields":  The label field,
the  instruction  field, the operand field and the comment field.
These are described below.

2.2.1 LABEL FIELD

A statement label consists of up to 6 characters,  the  first  of
which must be alphabetic and appear in column one.  The remaining
characters  may  be  alphabetic  or  numeric.   Each  label  must
terminate  with  a  colon  except  for  symbols on the pseudo ops
MACRO, SET and EQU, which end with  a  blank  or  tab.   A  label
identifies  a  particular  location in the program and should not
duplicate another  label,  symbol,  or  one  of  the  assembler's
permanent symbols, which include all of the instruction mnemonics
and pseudo ops.

The label field is optional except in statements with an EQU, SET
or MACRO statement.

2.2.2 INSTRUCTION FIELD

The  instruction  field  must  contain  either   an   instruction
mnemonic,  a pseudo op or the name of a user defined macro (i.e.,
a macro call).  The field may not start in column one.

2.2.3 OPERAND FIELD

The  operand  field,  if  required,  may  consist  of  constants,
statement  labels,  the instruction counter ($) or symbols SET or
EQUated  to  values.   These  elements  may  be   combined   into
expressions  with  arithmetic and logical operators, as described
below.  This field must be separated from the  instruction  field
by at least one space or tab.

                                                          Page 11


2.2.4 COMMENT FIELD

This field is optional;  it will appear on the  assembly  listing
but  will  be  ignored  by the assembler.  The comment field must
begin with a semicolon (;) and be separated from the  instruction
field by either an operand plus a space (or tab) or by two tabs.

2.3 EXPRESSIONS

Expressions can be  made  up  of  user  symbols,  numbers,  ASCII
constants,  statement  labels  and assembler reserved symbols for
the registers and instruction counter.  These may be combined  by
the  various  operators  and  contained  by  parentheses  to form
complex  expressions.   The  expression  handling  and  operators
available are a function of the assembler.  Many of the operators
have no simple implementation on the 8008 microprocessor.

2.3.1 SYMBOLS

Any alphanumeric symbol which has been used as a statement  label
or  set  or  equated to a value may be used in an expression.  In
addition, the instruction counter ($) and  the  register  symbols
(A, B, C, D, E, H, L, M, SP and PSW) may be used.

2.3.2 NUMERIC CONSTANTS

Numeric constants may be specified as binary, octal,  decimal  or
hexadecimal   constants.    To  do  this  the  number  should  be
immediately followed by a constant to indicate the radix used, as
shown in the examples below:

         B - BINARY  (E.G., 0101B)
         O OR Q - OCTAL (E.G., 015O or 015Q)
         D - DECIMAL  (E.G., 19D or 19)
         H - HEXADECIMAL (E.G., 0F8H)

Note that hex constants must always start with a decimal digit (0
if  necessary)  to  distinguish  them from user symbols.  Numbers
without any indication of radix  (no  trailing  letter)  will  be
treated as decimal numbers.

2.3.3 ASCII CONSTANTS

An ASCII constant is represented by a character  string  enclosed
in apostrophes.  The assembler will right justify the characters,
8 bits per character, with the parity bit (high order bit)  zero.
For example, 'AZ'.

2.3.4 EXPRESSION OPERATORS

The operators available for constructing expressions include both
the unary and binary operators listed below:

   UNARY:    +         BINARY:   +         XOR       SHR
             -                   -         MOD       AND
             NOT                 *         SHL       OR
             NEG                 /
                                                          Page 12


The last six of these and the not operator must be separated from
their operands by at least one space or tab.  Expressions will be
evaluated according to the  following  operator  precedence,  and
from left to right when of equal precedence:

   1)  parenthesized sub-expressions
   2)  unary - , NEG
   3)  *, /, MOD, SHL, SHR
   4)  +, -
   5)  NOT
   6)  AND
   7)  OR, XOR
                                                          Page 13


3.0 INSTRUCTION SET

This assembler supports the standard set of instruction mnemonics
for  the 8008.  A detailed explanation of each may be obtained by
referring  to  the  microprocessor   manufacturer's   programming
manual.  The supported instruction mnemonics are:


        ACI       EI        RAL
        ADC       HLT       RAR
        ADD       IN        RC
             INR       RET
        ANA       JC        RLC
        ANI       JM        RM
        CALL      JMP       RNC
        CC        JNC       RNZ
        CM        JNZ       RP
        CMP       JP        RPE
        CNC       JPE       RPO
        CNZ       JPO       RRC
        CP        JZ        RST
        CPE       MOV       RZ
        CPI       MVI       SBB
        CPO       NOP       SBI
        CZ        ORA       SUB
        DCR       ORI       SUI
        DI        OUT       XRA
                            XRI


In addition to the above 8008 mnemonics, the macro "LXI" has been
predefined to generate the appropriate "MOV" instructions to load
a pair of 8008 registers.
                                                          Page 14


4.0 ASSEMBLER DIRECTIVES (PSEUDO-OPS)

In  addition  to  normal  8008   instructions,   this   assembler
recognizes   a  number  of  assembler  directives,  or  so-called
"pseudo-ops".  These may appear in the instruction field  of  any
statement instead of an instruction mnemonic.  Various directives
are provided for  equating  symbols  to  values,  for  generating
various  types  of  data  (instead of instructions), for handling
macro definitions and conditional assembly, and  for  controlling
the  list  file  format.   These directives are summarized below;
most of them are also explained in more depth  in  the  following
pages.

          DIRECTIVE      CATEGORY

          DB             1
          DS             1
          DW             1
          EJECT          2
          ELSE           4
          END            1
          ENDIF          4
          ENDM           3
          EQU            1
          FORMLN         2
          IF             4
          LIST           2
          MACRO          3
          NLIST          2
          ORG            1
          SET            1
          TITLE          2



Categories referenced above:

(1) These directives are  part  of  the  standard  8008  assembly
language,   and  details  of  their  use  can  be  found  in  the
manufacturer's documentation.

(2) These are listing control directives,  described  in  section
4.3 of this manual.

(3) These directives deal with BSO's macro facility, described at
length in section 4.2 of this manual.

(4)  These  directives  deal  with  BSO's  conditional   assembly
facility, described in detail in section 4.1 of this manual.

4.1 CONDITIONAL ASSEMBLY

It is often necessary to make minor  changes  in  assembled  code
based  on  frequently-altered  parameters.   This assembler has a
conditional assembly feature which permits  such  changes  to  be
made with minimum effort.
                                                          Page 15


Portions of a program can be assembled or not depending upon  the
value  of  an  expression.  This is accomplished by preceding the
conditional section of code with a statement  containing  the  IF
pseudo op and the expression to be evaluated.  The end of a block
of conditional code is indicated  by  an  ENDIF  directive.   The
expression  following  the  IF pseudo op will be evaluated by the
assembler and the results compared to zero.   If  the  result  is
non-zero,  the conditional is true and the code will be assembled
normally.  If the condition is not true (zero result), all  lines
of source text between the conditional assembly directive and its
associated ENDIF directive are ignored by the assembler.

In addition, an optional  "ELSE"  directive  exists  which,  when
appearing  in  a  block of conditional code, reverses the current
true/false state of the conditional.  As many ELSE directives may
appear   as   are   desired;   each  causes  a  reversal  of  the
conditional.

The following example illustrates the use of conditional assembly
in a program.

                         IF VER-1 ;DON'T ASSEMBLE FOR VERSION 1
          HSIZE          EQU 6
                         ENDIF
                         IF VER ;DON'T ASSEMBLE FOR VERSION 0
          HSIZE          EQU 8
                         ENDIF

Conditional assembly directives may be nested to any depth;  that
is,  a  conditional  block  of  code  may  itself  contain  other
conditional blocks, each starting  with  one  of  the  previously
listed directives, ending with an ENDIF directive, and optionally
containing one or more ELSE directives.
                                                          Page 16


4.2 THE BSO MACRO FACILITY

The macro facility of this cross assembler permits the programmer
to  define  a  block  of  source  statements  which  can  be used
repeatedly throughout the program by just writing the macro  name
in the instruction field.  This makes it possible to have shorter
source files and more intelligible  program  listings.   Existing
programs  can also be modified by changing a macro definition and
re-assembling rather than by large scale editing.

Macro definitions are of the form:

          MNAME     MACRO DUM1,DUM2,...
                      .
                      .
                    ENDM

Where MNAME is the name of the macro and DUM1,DUM2,...  are dummy
argument  names  (if  any).  Dummy argument names have no meaning
outside a macro definition.  Within the macro definition they may
appear  anywhere  (in  any  field) and all occurrences of a dummy                                       ___
argument will be replaced by the actual argument strings when the
macro  is  used.  It should be noted that spaces or tabs trailing
the final argument in both the  definition  and  call  statements
will be taken as part of that argument.  To avoid this, the first
character after the last argument in  each  statement  should  be
either a CR-LF or a semicolon.

Macro definitions may not be nested.  The macro body may  contain
the  words  MACRO  or  ENDM.   A macro may contain calls to other
macros.

Macro calls are of the form:

          LABEL:    MNAME ARG1,ARG2,...

Where the LABEL is optional and MNAME is the name of a previously
defined   macro.    The   actual  arguments  (ARG1,ARG2,...)  are
substituted as  character  strings  into  the  positions  of  the
corresponding  dummy  arguments  in the macro definition.  Actual
arguments to a macro call should be separated from each other  by
commas.   Arguments omitted from a macro call are treated as null
strings;  extra arguments are ignored.  Notice that arguments can
be  expressions,  instruction  mnemonics,  comments or labels for
statements inside the macro expansion.  The  macro  processor  is
only  concerned  with  character  strings, which it passes to the
rest of the assembler.

Examples of a macro are shown on the following page.
                                                          Page 17


MACRO EXAMPLES


          PAUSE     MACRO ;WAIT 4 MACHINE CYCLES
                    NOP
                    NOP
                    NOP
                    NOP
                    ENDM




;BUILD 4 CHARACTER TABLE ENTRIES
          ENTRY     MACRO Q,R,S,T,VALUE
                    DB 'Q'
                    DB 'R'
                    DB 'S'
                    DB 'T'
                    DB VALUE
                    ENDM


An example of a macro call to build entry WXYZ using  the  second
example above:

          WXYZ:     ENTRY W,X,Y,Z,27


This would result in the following expansion:

                    DB 'W'
                    DB 'X'
                    DB 'Y'
                    DB 'Z'
                    DB 27
                                                          Page 18


4.2.1 NESTING OF MACROS

The BSO macro facility  permits  a  variety  of  types  of  macro
nesting  and redefinition.  These features prove quite useful for
various purposes.  Macros may be redefined at any time;  that is,
if a macro "ABC" is defined (and used), and another definition of
"ABC" appears subsequently, the new definition supersedes the old
definition  and is in effect beginning with the next occurance of
a call to "ABC".  Macros may call other macros  (that  is,  macro
definitions  may  include  calls  to  other  macros).   When this
occurs, all macro expansion is done at macro call time,  so  that
it  is not necessary to define macros in any particular order, as
long as all nested macros have been defined by the  time  one  is
called.   This  feature,  combined with the redefinition feature,
makes it possible to use the macro  facility  to,  for  instance,
build  corresponding  entries  in  parallel tables.  Consider the
following lines of code:

               STUFF     MACRO
                         XX 1,1
                         XX 2,4
                         XX 3,9
                         ENDM
               XX        MACRO %A,%B
                         DB %A
                         ENDM
               NUMTAB    STUFF
               XX        MACRO %A,%B
                         DB %B
                         ENDM
               SQRTAB    STUFF

The first thing we see in the example above is a definition for a
macro  called "STUFF".  This macro simply contains three calls to
another macro, called "XX".  The XX macro has  not  as  yet  been
defined, but this is of no consequence, since the user has merely
defined the "STUFF" macro, but has not yet attempted to call  it.
Had  the  user followed the definition immediately with a call to
"STUFF", the assembler would encounter three references to  "XX",
which  would  be an undefined instruction at that point and which
would generate errors.  Also note that the "STUFF" macro  has  no
parameters.   This  is  permissable.   A  macro need not have any
dummy arguments at all.

Following the definition of STUFF, we see a definition  of  "XX".
Note  that this macro has two dummy arguments, "%A" and "%B", but
that only "%A" is actually used within  the  macro  body.   While
this  is  not  probably normally done, the macro processor of the
assembler does not consider the condition an  error;   it  merely
notes  that "XX" has two dummy arguments, but that the second one
is never used.

The next line contains a label (NUMTAB) and a call to  the  macro
STUFF.   This  time,  XX  has been defined, so that STUFF expands
into three calls to XX, and each of them generates a DB directive
to  generate a byte containing the first argument to XX.  The end
result is a table which looks like
                                                          Page 19


               NUMTAB    DB 1
                         DB 2
                         DB 3


Next, we see that "XX" is redefined.  This definition is  similar
to the first definition of XX, except that this time it generates
a byte for the SECOND argument,  and  ignores  the  first.   This
definition of XX supersedes the earlier definition.

Now, STUFF is  called  again,  and  generates  another  table  of
entries, which looks as follows:

               SQRTAB    DB 1
                         DB 4
                         DB 9

The end result of all this work is that  we  have  generated  two
parallel tables, one containing integers and one containing their
associated squares.  More entries could easily be added to  these
tables  by  adding more "XX" entries within the definition of the
"STUFF" macro.  The two tables are guaranteed  to  be  in  phase,
because  they  are  generated  using  the  macro  facility of the
assembler.

BSO macros can directly and  indirectly  call  and  define  other
macros,  and  can  even  call or define themselves.  When a macro
calls itself, the user must be careful to  see  to  it  that  the
calling  process  does  not  continue indefinitely.  When a macro
defines itself, the new definition  takes  effect  in  subsequent
calls  to  the  macro,  but the current macro expansion continues
from the old definition.

Macro calls may be nested to a level of ten.  This parameter  can
be  altered  to  customer  specification.   Contact  BSO for more
information.
                                                          Page 20


4.3 LISTING CONTROL

This cross assembler permits the user to control to  some  extent
the  format of the list file produced.  The directives which deal
with this listing control are summarized below.

4.3.1 TITLE

The TITLE directive, in addition to  naming  the  object  module,
also specifies the title to be printed at the top of each listing
page.  Only one TITLE directive may appear in any program.

4.3.2 EJECT

The EJECT directive causes the listing to advance to the  top  of
the  next  page.   This also occurs if a form feed (control/L) is
encountered in the source file, and automatically every 55  lines
(see FORMLN, 4.3.9).  If a EJECT directive is used, only the page
throw occurs in the listing;  the EJECT directive itself does not
appear.



                                                          Page 21


5.0 OBJECT FILE FORMAT

5.1 STANDARD ABSOLUTE OBJECT FILE

The default object file produced by this assembler  is  an  ASCII
file in the format required by the INTEL 8008.  The layout of the
INTEL absolute object file is as follows:

          :           A colon for the record mark
          2 chars     number of data bytes (0 for end of file)
          4 chars     load address of first byte of record
          2 chars     record type (always 00)
          2 chars     first data byte
          2 chars     for each additional data byte
          2 chars     checksum

The checksum is the negative of the sum of all the 8-bit bytes in
the  record,  including  the  one  byte  count  and two byte load
address, with carries above 8 bits ignored.
                                                          Page 22


6.0 ERROR HANDLING

This assembler will print error messages at the  user's  terminal
and  in the program listing if the list file was requested in the
command line.  Errors are indicated by one or more characters  at
the  left  of  the  listing  line in which they occurred.  In all
cases, the assembler will attempt to generate some code for  each
source line so addresses further on in the program do not get out
of phase.  This also allows for a location into which a patch may
be  inserted  if the object file is used for debugging, even with
its errors.

The following error codes and explanations apply to this, and  in
many cases, other BSO assemblers for different microprocessors.

Error   Meaning
 Code

A       Address error.  Address expression greater than  16  bits
        or negative.

C       Constant error.  Indicates  bad  syntax  in  a  character
        constant  or  and illegal character in a numeric constant
        (e.g., 79Q).

D       Macro definition error.  The definition is ignored.   The
        error is caused by one of the following conditions:

        1.  The MACRO statement does not have a label

        2.  The MACRO statement has over ten arguments

        3.  The MACRO statement label is the same as a previously
            defined user symbol or pseudo-op.


E       Expression  error.   Caused  by  one  of  the   following
        conditions:

        1.  Incorrect syntax, a value of zero assumed

        2.  Numeric  expression  overflowed  16   bits,   it   is
            truncated


F       Format error.   Incorrect  number  of  operands  for  the
        instruction.

L       Label error.  Caused by one of the following conditions:

        1.  A symbol defined during pass 2 was not defined during
            pass 1.  The symbol is left undefined.

        2.  A SET or EQU pseudo-op was not preceded by a label

                                                          Page 23


M       Multiple definition error.  The  user  is  attempting  to
        define  a  symbol  (with something other than DEFL) which
        was already defined.  The second definition is ignored.

N       Nesting error.  An ENDM or ENDIF appeared which  was  not
        paired  with  a  MACRO or IF statement.  The statement is
        ignored.

O       Op code error.  An unknown op code detected.  Three bytes
        of zero generated.

P       Phase error.  A symbol has a different value  in  pass  2
        than  in  pass 1.  The pass 1 value prevails.  This error
        is usually caused by one of the following conditions:

        1.  An IF statement had a different value during  pass  2
            than in pass 1.

        2.  A macro was called before it was defined.


                Q  Questionable  syntax.    The   assembler   has
        encountered  a  statement  which  it  does not completely
        understand, due to  such  things  as  surplus  arguments,
        unrecognized instruction or null label.

R       Register error.  The register specified is illegal for an
        instruction.

S       Symbol error.  A macro name was used as a  symbol  in  an
        expression and is assumed to have a value of zero.

U       Undefined symbol.  A symbol was undefined and is  assumed
        to have a value of zero.

V       Value error.  Use of an  expression  too  large  for  the
        instruction field or one that is negative.
                                                          Page 24


7.0 SUMMARY OF DIFFERENCES

This assembler is compatible with the one supplied for  the  8008
by Intel with several minor exceptions.  These are listed below.


     1.  The following features conform to BSO standards and  may
         conflict   with   similar   features   offered   by  the
         manufacturer.

                                                                 (A)  Macro Processing
                                                                 (B)  Conditional Assembly Directives
                                                                 (C)  Listing Control
                                                                 (D)  Relocation Directives and Control

     2.  User defined symbols (statement labels) may have  up  to
         six characters as opposed to five allowed by INTEL.

     3.  Arguments  in  macro  expansions  are   substituted   as
         character   strings.   (INTEL  evaluates  arguments  and
         substitutes values.) This allows macro arguments  to  be
         substituted into a label, instruction or operand field.

     4.  Local labels in macro definitions are not allowed.   All
         labels are globally defined.

     5.  Operand fields may not  contain  an  instruction  within
         parentheses, for example, LABEL:  DB (ADD C) .


Please note that in most cases, macros can be written by the user
to  duplicate  directives  that are supported by the manufacturer
but do not appear in BSO software.

The list of differences above is accurate  to  the  best  of  our
knowledge,  however BSO does not warrant that it is complete.  In
addition, this or  any  other  BSO  product  is  not  necessarily
compatible with any past, current or future implementation



                 THE BOSTON SYSTEMS OFFICE, INC.
                  PROBLEM AND SUGGESTION REPORT


If you have any difficulty with BSO software,  if  you  note  any
errors  in  this  manual, or if you have any general suggestions,
please feel free to call us, or  mail  in  this  form  with  your
comments.



Product:                                       Version:
-----------------------------------------------------------------
Reported by:                                   Date:
-----------------------------------------------------------------
Company:                                       Phone:
-----------------------------------------------------------------
Address:
-----------------------------------------------------------------
Address
-----------------------------------------------------------------
Host computer/operating system:
-----------------------------------------------------------------

Description of bug or comments:
-----------------------------------------------------------------

-----------------------------------------------------------------

-----------------------------------------------------------------

-----------------------------------------------------------------

-----------------------------------------------------------------

-----------------------------------------------------------------

-----------------------------------------------------------------

-----------------------------------------------------------------

-----------------------------------------------------------------

-----------------------------------------------------------------

-----------------------------------------------------------------

-----------------------------------------------------------------


           Please return, along with terminal sessions
                 and listings, if available, to:

                 The Boston Systems Office,Inc.
                        469 Moody Street
                  Waltham, Massachusetts  02l54
                         (617) 864-7800



        REPORTING PROBLEMS WITH DOCUMENTATION OR SOFTWARE


Documentation:

At BSO we are constantly striving to improve the quality  of  our
documentation.    If  you  have  had  any  trouble  locating  the
information you need, or have found parts of this  manual  to  be
unclear  or  inaccurate,  we  would  appreciate hearing from you.
Please use the general purpose form on the following page.


Software:

In the event you  encounter  a  problem  with  your  use  of  BSO
software,  please  report  the difficulty to us by mailing in the
following three items:

     1.  The PROBLEM AND SUGGESTION  REPORT  on  the  next  page,
         giving  a  description  of the software problem.  Please
         fill in all requested information.

     2.  A small SAMPLE PROGRAM which illustrates the problem you
         encountered.   We  need  the  source code of your sample
         program ON WHATEVER  MEDIUM  (tape  or  disk)  YOUR  BSO
         SOFTWARE ARRIVED.  If an updated version of the software
         becomes necessary, we will send it to you on the tape or
         disk  you  have  provided  (assuming  you  are currently
         covered under a  new  product  warranty  or  a  software
         maintenance contract).

     3.  TERMINAL SESSIONS and/or LISTINGS of your sample program
         with  arrows  and comments to indicate where the problem
         occurred.

This information has proven to be  essential  for  the  effective
processing  of  any  software  problems.   Your  co-operation  in
sending the above three items, plus  any  additional  information
that  might  prove  helpful, such as command files, object files,
listing files, relocatable binary (ROB) files, etc., will  result
in the speediest possible handling of your problem.



                 THE BOSTON SYSTEMS OFFICE, INC.
                  PROBLEM AND SUGGESTION REPORT


NOTE:  If you are reporting a software problem, DO  NOT  send  in
this  form  alone.   Please  see the previous page for additional
required information.


Product:                                    Version:
-----------------------------------------------------------------
Distribution medium (mag tape, floppy, RK-05, etc.):
-----------------------------------------------------------------
Reported by:                                Date:
-----------------------------------------------------------------
Company:                                    Phone:
-----------------------------------------------------------------
Host computer/operating system:
-----------------------------------------------------------------

Comments regarding software or documentation:
-----------------------------------------------------------------      

-----------------------------------------------------------------

-----------------------------------------------------------------

-----------------------------------------------------------------

-----------------------------------------------------------------

-----------------------------------------------------------------

-----------------------------------------------------------------

-----------------------------------------------------------------

-----------------------------------------------------------------

-----------------------------------------------------------------

-----------------------------------------------------------------

-----------------------------------------------------------------


Please  mail  this   form,   along   with   additional   required
information, to:  

                 The Boston Systems Office, Inc.
                        469 Moody Street
                       Waltham, MA  02154
        HOW TO REPORT DOCUMENTATION OR SOFTWARE PROBLEMS


Documentation:



At BSO we are constantly striving to improve the quality  of  our
documentation.    If  you  have  had  any  trouble  locating  the
information you need, or have found parts of this  manual  to  be
unclear  or  inaccurate,  we  would  appreciate hearing from you.
Please use the general purpose form on the following page.


Software:

In the event you  encounter  a  problem  with  your  use  of  BSO
software,  please  report  the difficulty to us by mailing in the
following three items:

     1.  The PROBLEM AND SUGGESTION  REPORT  on  the  next  page,
         giving  a  description  of the software problem.  Please
         fill in all requested information.

     2.  A small SAMPLE PROGRAM which illustrates the problem you
         encountered.   We  need  the  source code of your sample
         program ON WHATEVER  MEDIUM  (tape  or  disk)  YOUR  BSO
         SOFTWARE ARRIVED.  If an updated version of the software
         becomes necessary, we will send it to you on the tape or
         disk  you  have  provided  (assuming  you  are currently
         covered under a  new  product  warranty  or  a  software
         maintenance contract).

     3.  TERMINAL SESSIONS and/or LISTINGS of your sample program
         with  arrows  and comments to indicate where the problem
         occurred.

This information has proven to be  essential  for  the  effective
processing  of  any  software  problems.   Your  co-operation  in
sending the above three items, plus  any  additional  information
that  might  prove  helpful, such as command files, object files,
listing files, relocatable binary (ROB) files, etc., will  result
in the speediest possible handling of your problem.



                 THE BOSTON SYSTEMS OFFICE, INC.
                  PROBLEM AND SUGGESTION REPORT


NOTE:  If you are reporting a software problem, DO  NOT  send  in
this  form  alone.   Please  see the previous page for additional
required information.


Product:                                    Version:
-----------------------------------------------------------------
Distribution medium (mag tape, floppy, RK-05, etc.):
-----------------------------------------------------------------
Reported by:                                Date:
-----------------------------------------------------------------
Company:                                    Phone:
-----------------------------------------------------------------
Host computer/operating system:
-----------------------------------------------------------------

Comments regarding software or documentation:
-----------------------------------------------------------------      

-----------------------------------------------------------------

-----------------------------------------------------------------

-----------------------------------------------------------------

-----------------------------------------------------------------

-----------------------------------------------------------------

-----------------------------------------------------------------

-----------------------------------------------------------------

-----------------------------------------------------------------

-----------------------------------------------------------------

-----------------------------------------------------------------

-----------------------------------------------------------------


Please  mail  this   form,   along   with   additional   required
information, to:  

                 The Boston Systems Office, Inc.
                        469 Moody Street
                       Waltham, MA  02154
   H&Q