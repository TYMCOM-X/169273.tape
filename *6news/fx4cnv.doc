















                          INSTRUCTIONS FOR CONVERTING


                                      FROM


                         FORTRAN IV (F40) TO FORTRAN-10




                      FX4CNV.DOC VERSION 1.3, MAY 15, 1978


          CAUTION: This document is PRELIMINARY.  Many of the features
          have  not  yet  been  implemented,  and  all  are subject to
          change.


































     PRELIMINARY INSTRUCTIONS FOR F40 - F10 CONVERSION        PAGE   1



      1.0 INTRODUCTION

          It is possible to mix F10  and  F40  programs  in  a  single
          module  and enable them to interact with each other in spite
          of the incompatibilities of their calling  sequences.   This
          is accomplished by two separate mechanisms:

            1. The /MIXFOR switch in a load command  tells  LOADER  to
               modify  all  F10 and F40 programs encountered while the
               switch is on to provide a  standard  calling  sequence.
               (There  is a /NOMIXFOR switch to disable the effects of
               the /MIXFOR switch.)

            2. A special library (LIBX4) provides F10 compatible entry
               points   for   MACRO   programs  designed  for  an  F40
               interface.

          Note that this mixing capability is provided primarily as an
          aid  to simplify the conversion of programs from F40 to F10.
          For this reason there is no  special  library  symmetric  to
          LIBX4.   (i.e.   there is no way to reference macro programs
          designed for an F10 interface from  F40.)  Furthermore  this
          capability  adds some overhead to program execution and core
          requirements and  is  recommended  for  use  ONLY  during  a
          conversion effort, not on a permanent basis.

          The following steps are required to convert from F40 to F10.

            1. Modify F40 source files to make them acceptible to  the
               F10   compiler.    All  known  syntactic  and  semantic
               incompatibilies are described in section 2.  This  step
               is basically complete when the programs compile without
               error  under  the  F10  compiler,  however   some   I/O
               discrepancies  may  still  be  detected  during program
               execution.

            2. Eliminating F40 library dependencies.  The F10  library
               (FORLIB)   is  lacking  many  of  the  user  referenced
               subroutines found in the F40 library.  (Note that  only
               user  referenced  subroutines  are  involved  as FORLIB
               contains F40 compatible entry points for  all  compiler
               referenced  subroutines.)  A  special  library  (LIBX4)
               contains F10 compatible entry points for  most  of  the
               user  referenced  subroutines.  Section 3 describes the
               procedures required to identify these  subroutines  and
               reference the corresponding F10 entry points.

            3. Modify linkages to subroutines written in any languages
               other  than  F10 or F40.  (The subroutines contained in













     PRELIMINARY INSTRUCTIONS FOR F40 - F10 CONVERSION        PAGE   2
          INTRODUCTION


               LIB40 and FTLIB4 are covered under step 2  rather  than
               this step.) Instructions are contained in section 4.

            4. Create new modules  using  the  /MIXFOR  and  /NOMIXFOR
               switches.   Instructions  for  using these switches are
               contained in section 5.

      2.0 SYNTACTIC DIFFERENCES BETWEEN F10 AND F40

          All currently known syntactic differences  between  F10  and
          F40 are described in this section.  This list of differences
          has been compiled from the experiences of TYMSHARE users and
          from  several  sources external to TYMSHARE.  No attempt has
          been made to verify that the differences listed in  external
          sources   actually   exist  under  Tymshare's  F10  and  F40
          compilers.   Those  not  actually  verified  on   Tymshare's
          systems are marked with an asterisk.  There do not currently
          exist any tools to aid in resolving these differences.

            1. OPEN STATEMENT

               F40 would accept a statement such as:

                    OPEN(5,'FILENAME',INPUT)

               but F10 requires the more restricted form:

                    OPEN(UNIT=5,FILE='FILENAME',ACCESS='SEQIN')

            2. CLOSE STATEMENT

               F40 would accept a statement such  as  "CLOSE(25)"  but
               F10 requires the more restricted form "CLOSE(UNIT=25)".

            3. MULTIPLE RETURNS

               If F40 encountered a statement of the form  "RETURN  I"
               it  would  return  to  the Ith argument in the argument
               list (without verifying that it is a statement  label),
               whereas  F10  will  return  to  the  Ith  label  in the
               argument list.  The two are equivalent if and  only  if
               all  the statement labels in the parameter list precede
               all other arguments.

            4. EXPONENTIATION

               F40 parses the statement A**B**C as (A**B)**C,  whereas
               F10 parses the same statement as A**(B**C).














     PRELIMINARY INSTRUCTIONS FOR F40 - F10 CONVERSION        PAGE   3
          SYNTACTIC DIFFERENCES BETWEEN F10 AND F40


            5. LINE LENGTHS

               Both F40 and F10 restrict line lengths to a maximum  of
               72  characters.   However  F40  counts  tabs  as single
               characters  when  checking  line  length,  whereas  F10
               expands the tabs to spaces before checking.

            6. LOGICAL CONSTANTS *

               Logical constants can't be  abbreviated  in  F10.   All
               references  to  .T.  and .F.  must be changed to .TRUE.
               and .FALSE.  respectively.

            7. OCTAL CONSTANTS *

               Any octal constants in a program should be preceded  by
               a  double  quote in F10 rather than the letter O of F40
               (e.g.  change A=O012345677 to A="012345677).

            8. MACRO PROGRAM COMPATIBILITY 

               MACRO programs written for F40 will not work with  F10.
               This  subject is covered in detail in other sections of
               this document.

            9. STATEMENT ORDER *

               Specification  statements   (e.g.    INTEGER,   COMMON,
               DIMENSION)  must  appear  before and DATA statements or
               executable statements in F10.

           10. I/O DIFFERENCES

               There are some differences  in  the  way  F40  and  F10
               handle I/O.  Consider the program:

                     N=0
                     WRITE(5,100)N
               100   FORMAT(1X,A5)
                     END

               When this program is executed under F40, a "NULL"  will
               be  output  to  the  terminal  (i.e.   nothing  will be
               typed).  F10 will output a "blank" to the terminal.  


















     PRELIMINARY INSTRUCTIONS FOR F40 - F10 CONVERSION        PAGE   4
          SYNTACTIC DIFFERENCES BETWEEN F10 AND F40


               There may also be discrepancies in  whether  or  not  a
               line  feed  is generated by an output statement.  These
               discrepancies will depend upon the version of F10  used
               ...   DEC  changed  line  feed generation in version 5A
               (Tymshare's V1.2).

           11. ERR= OPTION

               The  ERR=  option  for  READ/WRITE  statements  detects
               different  types  of errors in F10 than in F40.  In F40
               it was possible to use the ERR= option to detect  input
               errors  such  as an alpha character in a numeric field.
               F10 traps this type of error at a different  level  and
               terminates execution.  In F10 there is no simple way to
               check for an illegal character on input.

           12. ENCODE/DECODE *

               The ENCODE/DECODE  statements  in  F10  are  not  quite
               equivalent  to  their  F40  counterparts.  Consider the
               program:

                     A='HELLO'
                     I=12
                     ENCODE(5,100,I) ,I,A
               100   FORMAT(I2,A3)
                     TYPE 200,I
               200   FORMAT(1X,A5)
                     END

               F40 outputs 12HEL to the terminal.  Before the  program
               is run in F10 however, the comma before the second I in
               the ENCODE statement must be deleted.  It was  optional
               in F40 but not in F10.  If not deleted, output from the
               program under F10 will be something like"blank" "blank"
               HEL.

               Furthermore, F10 will yield unpredictable results  when
               a  varaible  is  specified  within the parenthesis of a
               DECODE/ENCODE statement and in the variable list.  Thus
               it is advisable to change:

                     ENCODE(5,100,I) ,I,A

               to:

                     K=I
                     ENCODE(5,100,I) K,A














     PRELIMINARY INSTRUCTIONS FOR F40 - F10 CONVERSION        PAGE   5
          LIBX4


      3.0 LIBX4

          LIBX4 is  a  special  library  containing  F40  (FORTRAN-IV)
          subroutines  and functions which can be used by F10 (FORTRAN
          10).  The calling sequence for F10 subroutines  is  slightly
          different  from  the  F40  calling  sequence  so F40 library
          routines  must  be  modified  to  run  with  F10   programs.
          Unfortunately, the source code for some F40 library routines
          no longer exists, so modification is impossible.   For  many
          of  these  routines,  interface  programs  have been written
          which are called using the F10 calling  sequence  and  which
          then  call  the  desired  F40  routine using the F40 calling
          sequence.  These interface routines and the F40 routines  to
          which they interface are located in library LIBX4.

      3.1 USING LIBX4

          In order to use this library the user must  make  sure  that
          his  F10  programs  do not directly reference any of the F40
          routines in LIBX4.  If they do, the loader will link the F10
          programs  to  the F40 subroutines/functions.  No errors will
          be detected at load time, but the load modules will not  run
          correctly.   The  following  procedure  will  locate all F40
          routine references  which  must  be  changed.   (Note:  this
          assumes  that  all syntactic differences between F40 and F10
          have  been  resolved  and  that   the   program   has   been
          successfully compiled using the F10 compiler.)

            1. Load the F10 programs using a command string such as:

                    LOAD MYPROG1,MYPROG2,...,MYPROGN

               This command must contain F10  programs  ONLY!  FORLIB,
               the  F10 library will be automatically searched and all
               required F10 library routines  will  be  loaded.   (The
               user  may  assume that any routines which have the same
               name in the F10 library as in  the  F40  libraries  are
               functionally  equivalent.)  Note  the list of undefined
               globals.  This list will be used in step 3.

            2. Load the F10 programs  again  using  the  same  command
               string  used  in step 1 with ",(SYS)LIBX4/LIB" appended
               to the end:

                    LOAD MYPROG1,MYPROG2,...,MYPROGN,(SYS)LIBX4/LIB

               Both  LIBX4  and  FORLIB  will  be  searched  and   any
               referenced  routines  will  be  loaded.  Again note the
               list of undefined globals.  Any globals which are still













     PRELIMINARY INSTRUCTIONS FOR F40 - F10 CONVERSION        PAGE   6
          LIBX4


               undefined  are  not  available  in  LIBX4  and  must be
               supplied  from  some  other  source.   These   may   be
               references  to  F10 or F40 programs (which were omitted
               from the load  string  and  which  will  be  fixed  via
               LOADER's  MIXFOR  feature)  or to other programs (which
               can be fixed up in one  of  the  manners  described  in
               section 4).

            3. The globals which were undefined in step 1 but  not  in
               step  2  correspond  to routines which reside in LIBX4.
               For  each  global  satisfying  these  conditions  (i.e.
               listed  in  step  1 but not in step 2), change your F10
               source to call the appropriate F10  interface  routine.
               (See section 3.2 for naming conventions.)

            4. After completing step 3, repeat step 1 and verify  that
               all  the  new  names  created in step 3 cause undefined
               global references.  If  any  of  the  undefined  global
               references  identified  in  step 3 still occur then you
               have missed a  subroutine/function  call  somewhere  in
               your  program.   It  is  imperative  that all undefined
               globals  identified  in  step  3  be  resolved   before
               attempting  to load and execute these programs.  If any
               new names do not  cause  undefined  global  references,
               there  are  naming  conflicts.   (Note: this should not
               happen.  As  routines  are  added  to  LIBX4  they  are
               carefully  compared  to the F10 library to avoid naming
               conflicts.  This step merely serves to  1)  assure  you
               that you are accessing the routine you expect and 2) to
               avoid needless  confusion  and  wasted  time  should  a
               naming  conflict  inadvertently  occur.  Please contact
               your  TYMSHARE  representative  if  you  encounter  any
               difficulties.)

            5. When using  LIBX4,  be  sure  that  the  (SYS)LIBX4/LIB
               occurs  after  all  F10  programs using LIBX4 routines,
               otherwise you may encounter undefined globals.

      3.2 NAMING CONVENTIONS

          It was not possible to build LIBX4 so that you could use the
          same  subroutine  names  your  F40  programs  used,  so  the
          following naming convention was adopted: an X is prefixed to
          the  F40  routine  name  to  generate  the  name  of the F10
          interface routine.  For example, if  the  name  of  the  F40
          routine  is  ABC,  the  name of the F10 interface routine is
          XABC.  If the F40 routine  has  a  6  character  name  (e.g.
          ABCDEF),  the F10 interface routine has the 6 character name
          formed by prefixing  an  X  to  the  F40  routine  name  and













     PRELIMINARY INSTRUCTIONS FOR F40 - F10 CONVERSION        PAGE   7
          LIBX4


          deleting  the last (rightmost) character from the name (e.g.
          XABCDE).

      3.3 F40 ROUTINES INCLUDED IN LIBX4


























































     PRELIMINARY INSTRUCTIONS FOR F40 - F10 CONVERSION        PAGE   8
          F10 LINKAGE TO F40-CALLABLE PROGRAMS


      4.0 F10 LINKAGE TO F40-CALLABLE PROGRAMS

          There  are  two  methods  of  making  F40-callable  programs
          callable from F10:

          Any F40-callable subroutine can be called from F10 using the
          same  convention  used  in  LIBX4.  This convention involves
          selecting a name for the F10 entry point, writing a  5  line
          program   and   including  this  program  and  the  original
          (F40-callable) subroutine in your load string.  The  program
          format is:
                        EXTERN F40NAME,XX4CNV
                        INTERN F10NAME
               F10NAME: PUSHJ   17,XX4CNV
                        JRST    F40NAME
                        END

          If the F40-callable program is  written  in  MACRO  and  the
          source  is  available,  the  source  can  be modified by the
          procedures given in one of the following DEC manuals:

               FORTRAN (10) PROGRAMMER'S REFERENCE MANUAL 
               APPENDIX C
               PAGE C-20

          or

               FORTRAN IV (F40) PROGRAMMER'S REFERENCE MANUAL
               CHAPTER 11
               PAGE 11-4
































     PRELIMINARY INSTRUCTIONS FOR F40 - F10 CONVERSION        PAGE   9
          USING THE /MIXFOR AND /NOMIXFOR SWITCHES


      5.0 USING THE /MIXFOR AND /NOMIXFOR SWITCHES

          While the /MIXFOR switch is on, LOADER will modify each  F10
          and F40 subroutine it encounters so that it may be called by
          either F10 or F40.  The algorithm relies on  the  fact  that
          the  compiler  generated  code for entry points, returns and
          argument  references   are   uniquely   identifiable.    The
          algorithm is unlikely to work with programs written in other
          languages.  Since the algorithm adds extra overhead to  each
          subroutine  it modifies, the /NOMIXFOR switch is provided so
          that routines may be selectively modified.

          If the /MIXFOR switch is  encountered  in  the  load  string
          after  an  F10  or  F40  program  has been loaded, a warning
          diagnostic will be generated.

          If any F10 or F40  programs  are  loaded  using  the  MIXFOR
          feature and the feature is then turned off, each F10 and
          program  subsequently  encountered  will  cause  a   warning
          diagnostic to be printed.

          The F40 libraries (LIB40 and  FTLIB4)  must  not  be  loaded
          before   the  F10  library  (FORLIB).   Thus  the  following
          switches must not occur in any load string  mixing  F10  and
          F40 programs:

               /LIB40

               FTLIB4/LIB

               LIB40/LIB

          The /MIXFOR switch will inhibit the automaic loading of  the
          F40   libraries.    The  /NOMIXFOR  switch  turns  off  this
          inhibition, so that it is possible to load  these  libraries
          if  some  F40  only  library  routines are needed.  However,
          CAUTION must  be  exercised  since  LOADER  will  use  these
          routines   to   satisfy   any  unresolved  global  requests,
          regardless of  whether  the  requestor  is  an  F10  or  F40
          program.






















     PRELIMINARY INSTRUCTIONS FOR F40 - F10 CONVERSION        PAGE  10
          OTHER F10/F40 COMPATIBILITY ISSUES


      6.0 OTHER F10/F40 COMPATIBILITY ISSUES

          This section describes miscellaneous compatibility issues.

      6.1 UPWARD COMPATIBILITY (FORSE TO FOROTS)

          SEQUENTIAL ASCII FILES written by FORSE may be read directly
          by  FOROTS;  record positioning operations, e.g., BACKSPACE,
          SKIP RECORD, may be used.

          SEQUENTIAL  BINARY  FILES  written  by  FORSE  may  be  read
          directly  by  FOROTS  in  a  forward  fashion  only;  record
          positioning operations are not permitted.

          SEQUENTIAL MIXED FILES written by FORSE may be read directly
          by  FOROTS  in  a  forward  fashion only; record positioning
          operations are not permitted.

          RANDOM ACCESS FILES written by FORSE  may  not  be  read  by
          FOROTS.   It  is suggested that a random access file be read
          (using FORSE) and be rewritten as a sequential file that can
          be accepted by FOROTS.








































  &L7*