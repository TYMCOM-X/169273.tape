	.TITLE	PKT3  RECONNECT ROUTINES
	.SBTTL	PKT3   - NEXILIS/JRG

	XLPAR				;DON'T LIST PARAMETER FILE

	CODE

;THIS MODULE CONTAINS ROUTINES TO IMPLEMENT THE RECONNECT FUNCTION WHICH
;  ALLOWS A CONNECTION TO BE MOVED TO A DIFFERENT FINAL DST.

;This module is required in any node in a network which supprots the reconnect
;  function which contains any module which can originate a connection.  If
;  a node cannot originate a connection or is part of a network which does
;  not support the reconnect function, this module is not required; the
;  dummy reconnect module, PKT3D, should be loaded instead.

;SHORT DESCRIPTION OF THE RECONNECT SEQUENCE:

;  The purpose of the reconnect sequence is to change a connection between
;  "SDB A" and "SDB B" to a connection between "SDB A" and "SDB C".  The
;  request to change the connection came from "SDB B".  The new SDB to connect
;  to, "SDB C", is specified by the request from "SDB B".  Initialy, the states
;  of both "SDB A" and "SDB B" are .SSCON.  A reconnect request packet (.PTRCR)
;  is sent from "SDB B" to "SDB A", which specifies that "SDB A" is to be
;  connected to "SDB C".  The .PTRCR packet has the same format as a connect
;  packet (.PTCON) except that the SRC specification area is not defined.
;  Sending the .PTRCR packet changes the state of "SDB B" to .SSRFP and of
;  "SDB A" to .SSRIP.  The .PTRCR packet is changed to a .PTCON packet and
;  sent to "SDB C".  The state of "SDB C" becomes .SSRTP (instead of the
;  normal .SSCTP) and the state of "SDB B" becomes .SSRFP (instead of .SSCFP).
;  The three SDB's are linked into a triangle, with the link-word of "SDB A"
;  pointing to "SDB C", "SDB C" pointing to "SDB B", and "SDB B" pointing to
;  "SDB A".  This trianglar "connection" is maintained until the reconnect
;  sequence is terminated.  Nothing may be sent from "SDB B" in this state.
;  "SDB A" may send data, which will be sent to "SDB B" (by some playing
;  around with the SDB link-words!).  "SDB C" may send only a CONNECT ACK
;  or CONNECT NAK.  If "SDB C" sends a CONNECT NAK, this indicates that the
;  reconnect has failed and the sequence is terminated.  (normal CONNECT NAK
;  retry is done - this assumes that the retry failed.)  Normal CONNECT NAK
;  processing has freed up "SDB C" when the CONNECT NAK is seen by this routine.
;  "SDB A" and "SDB B" are connected in a normal manner and their states are
;  set to .SSCON.  The CONNECT NAK is changed to a reconnect control eat packet
;  and sent to "SDB B".
;  If "SDB C" sends a CONNECT ACK, the reconnect has succeeded.  The states
;  of "SDB B" and "SDB C" are changed to .SSRFW and .SSRTW.  The CONNECT ACK
;  is changed to a RECONNECT CONTROL function packet with a "reason" of
;  377 and is sent to "SDB B".  Data may now be received from any of the
;  three SDB's.  Any data received from "SDB A" is placed on "SDB B"'s
;  blocked DST list.  Any data received from "SDB B" is sent to "SDB C".
;  Any data received from "SDB C" is sent to "SDB A".  This state continues
;  until a DISCONNECT packet with "reason" = .ERRCC (reconnect complete) is
;  received from "SDB B".  When this happens, "SDB A" is connected normally
;  to "SDB C" and the states of both are set to .SSCON.  "SDB B" is freed up
;  normally.
	.PAGE
	.SBTTL	PKT3   - ENTRIES FROM THE SOCKET STATE DISPATCH IN SNDPKT

;HERE FOR STATE = .SSRFP = 12 (RECONNECT FROM DEVICE PENDING)
;  AN SDB IS IN THIS STATE AFTER IT HAS SENT A RECONNECT REQUEST PACKET
;  BUT HAS NOT YET RECEIVED AN ACK OR NAK FROM THE CONNECT REQUEST SENT TO
;  THE NEW FINAL DST.

;ONLY "SDB B" CAN BE IN THIS STATE
;  THE ONLY POSSIBLE COMBINATION OF STATES INCLUDING THIS ONE IS:
;	"SDB A" - .SSRIP
;	"SDB B" - .SSRFP
;	"SDB C" - .SSRTP

STARFP::JMP	@DSPRFP(R0)		;DISPATCH ON THE PACKET TYPE

;DISPATCH TABLE FOR STATE = .SSRFP (RECONNECT FROM SOCKET PENDING)

	PURE

DSPRFP:	.WORD	KKXRFP		;.PTDAT =  0 - DATA
	.WORD	KKXRFP		;.PTCON =  1 - CONNECT REQUEST
	.WORD	KKXRFP		;.PTACK =  2 - CONNECT ACK
	.WORD	KKXRFP		;.PTNAK =  3 - CONNECT NAK
	.WORD	KKXRFP		;.PTFUN =  4 - FUNCTION
	.WORD	KKXRFP		;.PTINT =  5 - INTERRUPT FUNCTION
	.WORD	KKXRFP		;.PTEAT =  6 - EAT FUNCTION
	.WORD	KILRFP		;.PTDIS =  7 - DISCONNECT
	.WORD	KILRFP		;.PTKIL = 10 - KILL CONNECTION
	.WORD	KILRFP		;.PTDAK = 11 - DISCONNECT ACK
	.WORD	KKXRFP		;.PTRCR = 12 - RECONNECT REQUEST
	.WORD	KKXRFP		;	     - ILLEGAL

	CODE
	.PAGE
;HERE FOR STATE = .SSRTP = 14 (RECONNECT TO SOCKET PENDING)
;  AND SDB IS IN THIS STATE WHEN IT HAS RECEIVED A CONNECT REQUEST AS A
;  RESULT OF A RECONNECT REQUEST AND HAS NOT YET RECEIVED AN ACK OR NAK.
;  THIS STATE IS USED IN PLACE OF THE USUAL CONNECT FROM SOCKET PENDING STATE.

;ONLY "SDB C" CAN BE IN THIS STATE
;  THE ONLY POSSIBLE COMBINATION OF STATES INCLUDING THIS ONE IS:
;	"SDB A" - .SSRIP
;	"SDB B" - .SSRFP
;	"SDB C" - .SSRTP

STARTP::JMP	@DSPRTP(R0)		;DISPATCH ON THE PACKET TYPE

;DISPATCH TAPE FOR STATE = .SSRTP (RECONNECT TO SOCKET PENDING)

	PURE

DSPRTP:	.WORD	KKXRTP		;.PTDAT =  0 - DATA
	.WORD	CONCOL#		;.PTCON =  1 - CONNECT REQUEST
	.WORD	RCNACK		;.PTACK =  2 - CONNECT ACK
	.WORD	RCNNAK		;.PTNAK =  3 - CONNECT NAK
	.WORD	KKXRTP		;.PTFUN =  4 - FUNCTION
	.WORD	KKXRTP		;.PTINT =  5 - INTERRUPT FUNCTION
	.WORD	KKXRTP		;.PTEAT =  6 - EAT FUNCTION
	.WORD	RCNNAK		;.PTDIS =  7 - DISCONNECT
	.WORD	RCNNAK		;.PTKIL = 10 - KILL CONNECTION
	.WORD	KKXRTP		;.PTDAK = 11 - DISCONNECT ACK
	.WORD	KKXRTP		;.PTRCR = 12 - RECONNECT REQUEST
	.WORD	KKXRTP		;	     - ILLEGAL

	CODE
	.PAGE
;HERE FOR STATE = .SSRFW = 16 (RECONNECT FROM DEVICE WAITING)
;  AN SDB IS IN THIS STATE WHEN IT HAS SENT A RECONNECT REQUEST PACKET
;  AND THE ACK FOR THE CONNECT REQUEST GENERATED HAS BEEN RECEIVED BUT THE
;  RECONNECT DATA PACKET HAS NOT BEEN SENT YET

;ONLY "SDB B" CAN BE IN THIS STATE
;  THE ONLY POSSIBLE COMBINATION OF STATES INCLUDING THIS ONE IS:
;	"SDB A" - .SSRIP
;	"SDB B" - .SSRFW
;	"SDB C" - .SSRTW

STARFW::JMP	@DSPRFW(R0)		;DISPATCH ON THE PACKET TYPE

;DISPATCH TABLE FOR STATE = .SSRFW (RECONNECT FROM SOCKET WAITING)

	PURE

DSPRFW:	.WORD	DATRCN		;.PTDAT =  0 - DATA
	.WORD	KKXRFW		;.PTCON =  1 - CONNECT REQUEST
	.WORD	KKXRFW		;.PTACK =  2 - CONNECT ACK
	.WORD	KKXRFW		;.PTNAK =  3 - CONNECT NAK
	.WORD	DATRCN		;.PTFUN =  4 - FUNCTION
	.WORD	DATRCN		;.PTINT =  5 - INTERRUPT FUNCTION
	.WORD	DATRCN		;.PTEAT =  6 - EAT FUNCTION
	.WORD	DISRFW		;.PTDIS =  7 - DISCONNECT
	.WORD	KILRFW		;.PTKIL = 10 - KILL CONNECTION
	.WORD	KILRFW		;.PTDAK = 11 - DISCONNECT ACK
	.WORD	KKXRFW		;.PTRCR = 12 - RECONNECT REQUEST
	.WORD	KKXRFW		;	     - ILLEGAL

	CODE
	.PAGE
;HERE FOR STATE = .SSRTW = 20 (RECONNECT TO DEVICE WAITING)
;  AN SDB IS IN THIS STATE WHEN IT HAS RECEIVED A CONNECT REQUEST GENERATED AS
;  THE RESULT OF A RECONNECT REQUEST AND HAS RECEIVED AN ACK ON THE CONNECT
;  REQUEST BUT THE SOCKET SENDING THE RECONNECT REQUEST HAS NOT YET RECEIVED
;  THE RECONNECT DATA PACKET.

;ONLY "SDB C" CAN BE IN THIS STATE
;  THE ONLY POSSIBLE COMBINATION OF STATES INCLUDING THIS ONE IS:
;	"SDB A" - .SSRIP
;	"SDB B" - .SSRFW
;	"SDB C" - .SSRTW

STARTW::JMP	@DSPRTW(R0)		;DISPATCH ON THE PACKET TYPE

;DISPATCH TABLE FOR STATE = .SSRTW (RECONNECT TO SOCKET WAITING)

	PURE

DSPRTW:	.WORD	DATRCN		;.PTDAT =  0 - DATA
	.WORD	KKXRTW		;.PTCON =  1 - CONNECT REQUEST
	.WORD	KKXRTW		;.PTACK =  2 - CONNECT ACK
	.WORD	KKXRTW		;.PTNAK =  3 - CONNECT NAK
	.WORD	DATRCN		;.PTFUN =  4 - FUNCTION
	.WORD	DATRCN		;.PTINT =  5 - INTERRUPT FUNCTION
	.WORD	DATRCN		;.PTEAT =  6 - EAT FUNCTION
	.WORD	KILRTW		;.PTDIS =  7 - DISCONNECT
	.WORD	KILRTW		;.PTKIL = 10 - KILL CONNECTION
	.WORD	KKXRTW		;.PTDAK = 11 - DISCONNECT ACK
	.WORD	KKXRTW		;.PTRCR = 12 - RECONNECT REQUEST
	.WORD	KKXRTW		;	     - ILLEGAL

	CODE
	.PAGE
;HERE FOR STATE = .SSRIP = 22 (RECONNECT IN PROGRESS)
;  AN SDB IS IN THIS STATE DURING THE ENTIRE RECONNECT SEQUENCE WHEN IT IS THE
;  SDB WHICH ORIGINATED THE CONNECTION IN THE FIRST PLACE

;ONLY "SDB A" CAN BE IN THIS STATE
;  THE ONLY POSSIBLE COMBINAIONS OF STATES INCLUDING THIS ONE ARE:
;	"SDB A" - .SSRIP
;	"SDB B" - .SSRFP
;	"SDB C" - .SSRTP
;  OR
;	"SDB A" - .SSRIP
;	"SDB B" - .SSRFW
;	"SDB C" - .SSRTW

STARIP::JMP	@DSPRIP(R0)		;DISPATCH ON THE PACKET TYPE

;DISPATCH TABLE FOR STATE = .SSRIP (RECONNECT IN PROGRESS)

	PURE

DSPRIP:	.WORD	DATRCN		;.PTDAT =  0 - DATA
	.WORD	KKXRIP		;.PTCON =  1 - CONNECT REQUEST
	.WORD	KKXRIP		;.PTACK =  2 - CONNECT ACK
	.WORD	KKXRIP		;.PTNAK =  3 - CONNECT NAK
	.WORD	DATRCN		;.PTFUN =  4 - FUNCTION
	.WORD	DATRCN		;.PTINT =  5 - INTERRUPT FUNCTION
	.WORD	DATRCN		;.PTEAT =  6 - EAT FUNCTION
	.WORD	KILRIP		;.PTDIS =  7 - DISCONNECT
	.WORD	KILRIP		;.PTKIL = 10 - KILL CONNECTION
	.WORD	KKXRIP		;.PTDAK = 11 - DISCONNECT ACK
	.WORD	KKXRIP		;.PTRCR = 12 - RECONNECT REQUEST
	.WORD	JNKOWN#		;	     - ILLEGAL

	CODE
	.PAGE
	.SBTTL	PKT3   - SEND RECONNECT REQUEST PACKET WHEN STATE = .SSCON

;HERE FROM DISPATCH IN SNDPKT TO SEND RECONNECT REQUEST PACKET FROM SOCKET
;  WHOSE STATE IS .SSCON

;THIS PACKET WAS SENT FROM "SDB B" WHICH IS NOW LINKED TO "SDB A"

SNDRCR::MOV	(SD),R2			;GET LINKED SDB
	TBBE	$D0LNK,@SDDDB#(R2),2$	;ARE WE LINKED TO AN INTERNAL LINK?
	JMP	SNDDAT#			;YES-JUST LIKE A FUNCTION PACKET!

2$:	MOVB	#.PTCON,PKTYPE(R1)	;CHANGE THIS TO A CONNECT PACKET
	BISB	#100,PKDATA+27(R1)	;INDICATE THIS IS A RECONNECT CONNECT
	PUSH	SD			;SAVE SRC SDB ("SDB B")
	MOV	(SD),SD			;POINT TO DST SDB ("SDB A")
	MOV	SDDDB#(SD),R4		;POINT TO DST DDB
	CALL	@DDSSRC#(R4)		;SETUP THE SRC FIELD IN THE PACKET
	MOV	(SP),SD			;RESTORE SRC SDB ("SDB B")
	MOV	SDDDB#(SD),R4		;AND SRC DDB
	MOV	(SD),(SP)		;SAVE ADDRESS OF LINKED SDB ("SDB A")
	CALL	CONNSB#			;PROCESS THE CONNECT PACKET
	  BR	4$			;If connect worked so far
	POP	R0			;Failed-get address of "SDB A"
	BR	RCNNK2			;And go process the NAK packet

;Here if connect did not fail immediately

4$:	POP	R0			;Restore address of "SDB A"
	MOV	(SD),R2			;Get address of "SDB C"
	MOVB	#.SSRFP,SDSTS1#(SD)	;Fix up the socket states
	MOVB	#.SSRTP,SDSTS1#(R2)
	MOVB	#.SSRIP,SDSTS1#(R0)
	MOV	R0,(SD)			;Point "SDB B" to "SDB A"
	MOV	R2,(R0)			;Point "SDB A" to "SDB C" ("SDB C"
					;  already points to "SDB B")
	RETURN				;Thats all
	.PAGE
	.SBTTL	PKT3   - PROCESS CONNECT ACK PACKET WHEN STATE = .SSRTP

;HERE FOR CONNECT ACK PACKET WHEN SOCKET STATE = .SSRTP

;THIS PACKET WAS SENT FROM "SDB C".  WE FIRST BLOCK ANY PACKETS CURRENTLY
;  ON "SDB B"'S DST LIST AND THEN CHANGE THIS PACKET TO A RECONNECT ACK
;  PACKET AND SEND IT TO "SDB B".  WE CHANGE THE STATES OF "SDB B" AND
;  "SDB C" TO .SSRFW AND .SSRTW.

RCNACK:	CALL	CLRCTP#			;Clear the pending state
	PUSH	R1			;Save the ACK packet
	MOVB	PKDATA+1(R1),R0		;Get socket number on host
	MOV	(SD),R2			;Get address of "SDB B"
	MOV	SDPKDH#(R2),R1		;Anything on "SDB B"'S DST list?
	BNE	4$			;Yes-go on
	MAKPKT	.PLSTP#			;No-get a packet
	BCS	14$			;If none available! (In this case, we
					;  just send this packet on to "SDB A"!
					;  This will leave things in a very
					;  mixed up condition, but there is not
					;  much we can do about it without any
					;  packets!  Hopefully, someone else
					;  will time out and kill this mess!!
	CLR	PKCNT(R1)		;Make into an empty data packet
	CLRB	PKPNT(R1)
	MOV	R1,(R1)			;Link it to itself
	MOV	R1,SDPKDT#(R2)		;Put it on the "tail"
	BR	6$			;CONTINUE

;HERE IF "SDB B"S DST LIST IS NOT EMPTY!

4$:	MOV	R1,@SDPKDT#(R2)		;Link the list into a ring!
6$:	MOVB	#.SSRFW,SDSTS1#(R2)	;CHANGE SDB STATES
	MOVB	#.SSRTW,SDSTS1#(SD)
	MOV	SDPKDH#(R2),R3		;Get previous head pointer
	MAKPKT	.PLSTP#			;Get another packet
	BCS	14$			;If none available! (We can't tell him
					;  about what we are doing if we can't
					;  get a packet!  We just forget about
					;  it and hope he will time out!)
	MOV	#.PTFUN*400+3,PKCNT(R1)	;Make packet into a Reconnect ACK packet
	MOV	#377*400+.FNRCC,PKDATA(R1)
	MOVB	R0,PKDATA+2(R1)		;Store socket number on host
	MOV	R1,SDPKDH#(R2)		;Put it on the "head"
	TST	R3			;Was the DST list empty before?
	BNE	14$			;No
	CALL	SNDDA3#			;Yes-poke "SDB B"
14$:	POP	R1			;RESTORE ADDRESS OF CONNECT ACK PACKET
	MOV	@0(SD),R2		;GET ADDRESS OF "SDB A"
	CJMP	SNDDA0#			;Send the connect ACK to "SDB A" (We do
					;  this mainly so will get terminal
					;  profile set right)
	.PAGE
	.SBTTL	PKT3   - PROCESS CONNECT NAK PACKET WHEN STATE = .SSRTP

;HERE FOR CONNECT NAK PACKET WHEN SOCKET STATE = .SSRTP

;THIS PACKET WAS SENT FROM "SDB C".  WE PUT THINGS BACK LIKE THEY WERE TO
;  BEGIN WITH ("SDB A" CONNECTED TO "SDB B"), CHANGE THIS TO A RECONNECT
;  NAK EAT PACKET AND SEND IT TO "SDB B".  THIS TERMINATES THE RECONNECT
;  SEQUENCE.

RCNNAK:	MOV	(SD),R2			;GET ADDRESS OF "SDB B"
	PUSH	(R2)			;SAVE ADDRESS OF "SDB A"
	MOV	SD,(R2)			;POINT "SDB B" TO "SDB C"
	CALL	RTYNAK#			;RETRY THE CONNECTION IF POSSIBLE
	  BR	RCNNK4			;YES
	POP	R0			;GET ADDRESS OF "SDB A"
	MOV	R0,(R2)			;LINK "SDB A" TO "SDB B"
	MOV	R2,(R0)
RCNNK2:	MOVB	#.SSCON,SDSTS1#(R0)	;FIX UP THE SOCKET STATES
	MOVB	#.SSCON,SDSTS1#(R2)
	PUSH	SD			;Save "SDB C"
	MOV	R0,SD			;Point to "SDB A"
	INCB	SDPCNT#(SD)		;CHARGE THIS PACKET TO "SDB A"
	MOVB	PKCNT(R1),R0		;GET PACKET SIZE
	PUSH	R1			;MOVE EVERYTHING DOWN BY 1 BYTE
	ADD	R0,R1
	ADD	#PKDATA,R1
	MOV	R1,R3
	INC	R3
4$:	MOVB	-(R1),-(R3)
	SOB	R0,4$
	MOVB	#.FNRCC,(R1)		;STORE FUNCTION TYPE
	POP	R1			;RESTORE PACKET ADDRESS
	INCB	PKCNT(R1)		;FIX UP THE COUNT
	MOVB	#.PTEAT,PKTYPE(R1)	;CHANGE PACKET TYPE TO EAT
	CALL	SNDEAT#			;Send the packet
	POP	SD			;Restore address of "SDB C"
	RETURN				;And return

;HERE IF WE WERE ABLE TO RETRY THE CONNECTION

RCNNK4:	POP	@0(SD)			;RESTORE THE FUNNY RING OF SDB'S
	RETURN				;AND RETURN
	.PAGE
	.SBTTL	PKT3   - PROCESS DATA-LIKE PACKETS IN RECONNECT STATES

;HERE FOR PACKETS WHICH ARE HANDLED LIKE NORMAL DATA PACKETS (DATA, INTERRUPT,
;  EAT, AND FUNCTION).  NOTE THAT TO KEEP THINGS SIMPLE, THESE ARE ALL TREATED
;  THE SAME.

DATRCN:	MOV	@0(SD),R2		;Get address of SDB we want to send
					;  this to!
	CJMP	SNDDA0#			;Send it and return

	.SBTTL	PKT3   - PROCESS DISCONNECT PACKET WHEN STATE = .SSRFW

;HERE FOR DISCONNECT PACKET WHEN STATE = .SSRFW

;THIS PACKET WAS SENT FROM "SDB B".  THIS IS THE NORMAL TERMINATION FOR A
;  SUCESSFUL RECONNECT SEQUENCE PROVIDED THE REASON IS .ERRCC (RECONNECT
;  COMPLETE).  WE FIX UP THE SDB LINK-WORDS TO CONNECT "SDB A" TO "SDB C",
;  FIX UP THE STATES, AND MOVE THE "BLOCKED" DST LIST FROM "SDB B" TO
;  "SDB C".

DISRFW:	CMPB	#.ERRCC,PKDATA(R1)	;IS THE REASON .ERRCC?
	BNE	KILRFW			;NO-THIS MAKES US VERY UNHAPPY!
	FREPKT				;Get rid of this packet
	MOV	(SD),R0			;GET "SDB A"
	MOV	(R0),R2			;AND "SDB C"
	CLR	(SD)			;UNLINK "SDB B"
	MOV	R0,(R2)			;LINK "SDB A" TO "SDB C" (NOW THIS
					;  LINK IS BOTH WAYS!)
	MOVB	#.SSCON,SDSTS1#(R0)	;UPDATE SOCKET STATES FOR "SDB A" AND
	MOVB	#.SSCON,SDSTS1#(R2)	;  "SDB C"
	MOV	SDPKDT#(SD),R3		;GET THE "BLOCKED" DST LIST FROM "SDB B"
	BNE	2$			;FOR DEBUGGING!
	FSTOP	BDL			;[BAD DST LIST]

2$:	MOV	(R3),R1			;GET FIRST PACKET
	CLR	(R3)			;CLEAR FINAL LINK-WORD
	TST	PKCNT(R1)		;IS THE FIRST ONE AN EMPTY DATA PACKET?
	BNE	4$			;NO-GO ON
	PUSH	(R1)			;YES-JUNK IT
	FREPKT
	POP	R1
	BEQ	10$			;GO ON IF NOTHING ELSE THERE!
4$:	MOV	SDPKDT#(R2),R3		;ANY PACKETS ON "SDB C"'S DST LIST?
	BNE	6$			;YES
	MOV	R1,SDPKDH#(R2)		;NO-PUT OUR LIST ON HIS LIST!
	MOV	SDPKDT#(SD),SDPKDT#(R2)
	CALL	REQXR1#			;Poke "SDB C"
	BR	10$			;CONTINUE

;HERE IF THERE ARE SOME PACKETS ON "SDB C"'S DST LIST NOW

6$:	MOV	R1,(R3)			;LINK TO END OF EXISTING LIST
	MOV	SDPKDT#(SD),SDPKDT#(R2)
10$:	CLR	SDPKDT#(SD)		;CLEAR TAIL POINTER IN "SDB B"
	CJMP	SNDKL5#			;Go send Disconnect ACK and return
	.PAGE
	.SBTTL	PKT3   - KILL OR DISCONNECT PACKETS IN RECONNECT STATES

;HERE FOR KILL OR DISCONNECT PACKET WHEN SOCKET STATE = .SSRFP

;THIS PACKET WAS SENT FROM "SDB B"

;WHEN THIS HAPPENS, A KILL PACKET IS SENT TO BOTH "SDB A" AND "SDB C" AND A
;  DISCONNECT NAK PACKET IS SENT BACK TO "SDB B".  THE RESULT IS THAT ALL 3
;  SDB'S WILL BE DISCONNECTED.

KILRFP:	CALL	CLRCFP#			;CLEAR UP THE PENDING STATE
	BR	KILCOM			;CONTINUE

;HERE FOR KILL OR DISCONNECT PACKET WHEN SOCKET STATE = .SSRFW

;THIS PACKET WAS SENT FROM "SDB B"

KILRFW:	CALL	CLRRFW			;CLEAR THE WAITING STATE
	BR	KILCOM			;CONTINUE

;HERE FOR KILL OR DISCONNECT PACKET WHEN SOCKET STATE = .SSRTW

;THIS PACKET WAS SENT FROM "SDB C"

KILRTW:	PUSH	SD			;Clear the waiting state
	MOV	(SD),SD			;Point to SDB B
	CALL	CLRRFW
	POP	SD
	BR	KILCOM			;Continue
	.PAGE
;HERE FOR KILL OR DISCONNECT PACKET WHEN SOCKET STATE = .SSRIP

;THIS PACKET WAS SENT FROM "SDB A"

KILRIP:	PUSH	SD			;Save our SDB address
	MOV	@0(SD),SD		;Point to "SDB B"
	CMPB	#.SSRFP,SDSTS1#(SD)	;Is the connect still pending?
	BNE	4$			;Nope
	CALL	CLRCFP#			;Yes-clear the pending state
4$:	CMPB	#.SSRFW,SDSTS1#(SD)	;Are we in the waiting state?
	BNE	6$			;No
	CALL	CLRRFW			;Yes-clean it up
6$:	POP	SD			;Restore SD
KILCOM:	PUSH	@0(SD)			;Save 3rd SDB address
	MOV	SD,@0(SD)		;Make this into a "normal" connection
	MOVB	#.PTKIL,PKTYPE(R1)	;Make sure this is a kill packet
	PUSHB	PKDATA(R1)		;Save reason
	CALL	SNDKIL#			;Send the packet
	MOV	2(SP),R0		;Save current SDB address and point to
	MOV	SD,2(SP)		;  3rd SDB
	MOV	R0,SD
	CLR	(SD)			;Clear the link-word
	CALL	CLRSDV#			;Clear DST list for 3rd SDB
	POP	R0			;Restore reason
	CALL	KILKI3#			;Finish up
	POP	SD			;Restore  SDB
	RETURN				;Finished!
	.PAGE
	.SBTTL	PKT3   - ROUTINES FOR ILLEGAL PACKETS IN RECONNECT STATES

;HERE FOR ILLEGAL PACKET TYPE WHEN SOCKET STATE = .SSRFP

;THIS PACKET WAS SENT FROM "SDB B"

KKXRFP:	PUSH	(SD)			;SAVE ADDRESS OF "SDB A"
	MOV	SD,@0(SD)		;LINK "SDB B" TO "SDB C"
	CALL	KILKIW#			;HANDLE "SDB B" AND "SDB C"
	BR	KKXCOM			;CONTINUE

;HERE FOR ILLEGAL PACKET TYPE WHEN SOCKET STATE = .SSRTP

;THIS PACKET WAS SENT FROM "SDB C"

KKXRTP:	PUSH	@0(SD)			;SAVE ADDRESS OF "SDB A"
	MOV	SD,@0(SD)		;LINK "SDB B" TO "SDB C"
	CALL	KILKIX#			;HANDLE "SDB B" AND "SDB C"
	BR	KKXCOM			;CONTINUE
	.PAGE
;HERE FOR ILLEGAL PACKET TYPE SOCKET STATE = .SSRFW

;THIS PACKET WAS SENT FROM "SDB B"

KKXRFW:	PUSH	(SD)			;SAVE ADDRESS OF "SDB A"
	CALL	CLRRFW			;CLEAN UP "SDB B"'S DST LIST
	MOV	@0(SD),(SD)		;Link "SDB C" to "SDB B"
	BR	KKXRXW			;Continue

;HERE FOR ILLEGAL PACKET TYPE WHEN SOCKET STATE = .SSRTW

;THIS PACKET WAS SENT FROM "SDB C"

KKXRTW:	PUSH	@0(SD)			;SAVE ADDRESS OF "SDB A"
	PUSH	SD			;SAVE OUR SDB ("SDB C")
	MOV	(SD),SD			;POINT TO "SDB B"
	CALL	CLRRFW			;CLEAN UP "SDB B"'S DST LIST
	POP	SD			;RESTORE OUR SDB
	MOV	SD,@0(SD)		;LINK "SDB B" TO "SDB C"
KKXRXW:	CALL	KILKIL#			;HANDLE "SDB B" AND "SDB C"
KKXCOM:	MOV	(SP),R0			;POINT TO "SDB A"
	MOV	SD,(SP)
	MOV	R0,SD
	CLR	(SD)			;CLEAR THE LINK-WORD
	CALL	KILKI2#			;Finish up
	POP	SD			;Restore SD
	RETURN				;Thats all
	.PAGE
;HERE FOR ILLEGAL PACKET TYPE WHEN SOCKET STATE = .SSRIP

;THIS PACKET WAS SENT FROM "SDB A"

;"SDB A" IS SOMEWHAT DIFFERENT FROM "SDB B" OR "SDB C" AT THIS POINT.  SINCE
;  ALL THAT WILL HAPPEN HERE IS THAT KILL PACKETS WITH REASON = .ERISU WILL
;  BE SENT TO ALL THREE SDB'S, IT DOESN'T REALLY MATTER WHERE THE BAD PACKET
;  COMES FROM!  THUS THE EASIEST WAY TO HANDLE THIS CASE IS TO MAKE IT LOOK
;  LIKE THE BAD PACKET CAME FROM ONE OF THE OTHER SDB'S INVOLVED, SINCE WE
;  ALREADY CODE TO HANDLE THAT CASE.  "SDB C" IS A LITTLE EASIER SINCE "SDB A"
;  POINTS TO IT!

KKXRIP:	MOVB	#MAXPKT#,PKTYPE(R1)	;MAKE THIS A COMPLETELY ILLEGAL PACKET
	PUSH	SD			;SAVE OUR SDB ("SDB A")
	MOV	(SD),SD			;POINT TO "SDB C"
	CALL	SNDPKT#			;SEND THIS PACKET FROM "SDB C"
	POP	SD			;RESTORE OUR SDB ("SDB A")
	RETURN				;THATS ALL!
	.PAGE
	.SBTTL	PKT3   - SUBROUTINES

;SUBROUTINE TO CLEAN UP THE RECONNECT WAITING STATE - IN THIS STATE THE DST
;  LIST OF "SDB B" IS "BLOCKED" AND MUST BE FIXED!
;	C(SD) = ADDRESS OF "SDB B"
;	CALL	CLRRFW

CLRRFW:	PUSH	R1			;SAVE PACKET ADDRESS
	MOV	SDPKDH#(SD),R1		;ANYTHING BEING SENT NOW?
	BEQ	2$			;NO-GO ON
	CALL	GIVPKT#			;YES-GIVE IT UP
2$:	MOV	SDPKDT#(SD),R1		;GET TAIL PACKET
	BNE	6$			;THERE MUST BE ONE!
4$:	FSTOP	LBE			;[LIST BLOCKING ERROR]

6$:	MOV	(R1),SDPKDH#(SD)	;RESTORE HEAD POINTER
	BEQ	4$			;MAKE SURE REALLY HAD A RING
	CLR	(R1)			;CLEAR LAST LINK WORD
	POP	R1			;RESTORE CURRENT PACKET
	RETURN

;SUBROUTINE CALLED BY RECONNECT ROUTINE TO SETUP SRC FIELD IN CONNECT PACKET
;  MADE FROM A RECONNECT PACKET - THIS IS A DEFAULT ROUTINE WHICH DOES THE
;  MINIMUM NECESSARY - AN INDIVIDUAL DEVICE OR GATEWAY MAY DO MORE IN ADDITION
;  TO OR IN PLACE OF THIS ROUTINE
;	C(R1) = ADDRESS OF PACKET
;	C(R4) = ADDRESS OF DDB
;	C(SD) = ADDRESS OF SDB
;	CALL	XXSSRC

XXSSRC::MOVB	DDID#(R4),PKDATA+14(R1)	;STORE SRC DEVICE I.D.
	MOVB	SDSOC#(SD),PKDATA+15(R1);STORE SRC SOCKET NUMBER
	MOV	#THSNOD#,R3		;COPY SRC NODE NAME INTO THE PACKET
	MOV	#PKDATA+16,R2
	ADD	R1,R2
4$:	MOVB	(R3)+,(R2)+		;COPY CHARACTER
	BNE	4$			;CONTINUE IF MORE TO COPY
	CLR	PKDATA+24(R1)		;CLEAR PRIV. BYTES
	RETURN				;THATS ALL

	.END
                                                                                                                                             T}_