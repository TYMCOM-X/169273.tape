	.SBTTL	MAC86 - Instruction set macros for Intel 8086 microprocessor

	.ENABL	LC,SCM		;SUPPRESS COMMENTS IN MACROS

;  This file defines a set of macros that allow MACRO-11 to generate
;  instructions for the Intel 8086 microprocessor.  The entire instruction
;  set can be generated, however, many of the formats and mnemonics are
;  different from those defined by Intel.

;  Written 80-Mar-4 by Bruce L. Trumbo with assistance from Leland G. Hoover

	.NLIST				;Don't need to see instruction macros
	.NLIST				;Really don't need generation macros

	.DSABL	REG
.PAGE
; Register bit definitions

; 16-bit (w=1)
AX=	0
CX=	1
DX=	2
BX=	3
SP=	4
BP=	5
SI=	6
DI=	7

; 8-bit (w=0)
AL=	0
CL=	1
DL=	2
BL=	3
AH=	4
CH=	5
DH=	6
BH=	7

; Segment registers
ES=	0
CS=	1
SS=	2
DS=	3
.PAGE
; Syntax macros - generate instruction macros

;  DWMRR - Generate  macros using the dw-mod-reg-r/m format
	.MACRO	DWMRR,MNE,OP
	DEFMRR	MNE'BF,<OP!0>
	DEFMRR	MNE'WF,<OP!1>
	DEFMRR	MNE'BT,<OP!2>
	DEFMRR	MNE'WT,<OP!3>
	.ENDM

;  DEFMRR - Generate macros using mod-reg-r/m format
	.MACRO	DEFMRR,MNE,OP
	.MACRO	MNE,REG,MOD,DISP
	 .BYTE	 ^O'OP
	MDRGRM	REG,MOD,DISP
	$=.
	.ENDM
	.ENDM

;  IMMRM - Generate macros for immediate to register/memory format (byte/word)
	.MACRO	IMMRM,MNE,OP,SUBOP
	IMMRMF	MNE'BI,OP!0,SUBOP,1
	IMMRMF	MNE'WI,OP!1,SUBOP,2
	.ENDM

;  IMMSL - Generate macros for immediate byte/word/sign-extend format
	.MACRO	IMMSL,MNE,OP,SUBOP
	IMMRMF	MNE'BI,OP!0,SUBOP,1
	IMMRMF	MNE'WI,OP!1,SUBOP,2
	IMMRMS	MNE'BS,OP!2,SUBOP,1
	IMMRMS	MNE'WS,OP!3,SUBOP,1
	.ENDM

;  IMMRMF - Generate a particular macro for immediate to register/memory format
	.MACRO	IMMRMF,MNE,OP,SUBOP,N
	.MACRO	MNE,MOD,DISP,IVAL
	 .BYTE	 ^O'OP
	MDRGRM	<^O'SUBOP>,MOD,DISP
	.IF	EQ,N-2
	 .BYTE	 IVAL&^O377,	IVAL&^O177400/^O400
	.IFF
	 .BYTE	 IVAL
	.ENDC
	$=.
	.ENDM
	.ENDM

;  IMMRMS - Generate a particular macro for immediate to register/memory format
	.MACRO	IMMRMS,MNE,OP,SUBOP,N
	.MACRO	MNE,MOD,DISP,IVAL
	 .BYTE	 ^O'OP
	MDRGRM	<^O'SUBOP>,MOD,DISP
	.IF	EQ,N-2
	 .BYTE	 IVAL&^O377,	IVAL&^O177400/^O400
	.IFF
	.BYTES	IVAL
	.ENDC
	$=.
	.ENDM
	.ENDM

;  GRP12 - generate group 1 or group 2 instruction macro
	.MACRO	GRP12,MNE,OP,SUBOP
	.MACRO	MNE,MOD,DISP
	 .BYTE	 ^O'OP
	MDRGRM	<^O'SUBOP>,MOD,DISP
	$=.
	.ENDM
	.ENDM

;  GRPBW - generate group 1 or group 2 instruction macros in byte/word flavors
	.MACRO	GRPBW,MNE,OP,SUBOP
	GRP12	MNE'B,OP!0,SUBOP
	GRP12	MNE'W,OP!1,SUBOP
	.ENDM

;  SHFTOP - generate shift instruction macros
	.MACRO	SHFTOP,MNE,OP,SUBOP
	GRPBW	MNE,OP,SUBOP
	GRPBW	MNE'V,OP!2,SUBOP
	.ENDM

;  OPREG - generate macros for 8-bit instructions referencing one register
	.MACRO	OPREG,MNE,OP
	.MACRO	MNE,REG
	 .BYTE	 ^O'OP+REG
	$=.
	.ENDM
	.ENDM

;  IMMACC - generate macros for immediate-to-accumulator instructions
	.MACRO	IMMACC,MNE,OP

	.MACRO	MNE'B,IVAL
	 .BYTE	 ^O'OP,	IVAL
	$=.
	.ENDM

	.MACRO	MNE'W,IVAL
	 .BYTE	 ^O'OP!1,	IVAL&^O377,	IVAL&^O177400/^O400
	$=.
	.ENDM

	.ENDM

;  SEGREG - generate macros for short segment register instructions
	.MACRO	SEGREG,MNE,OP
	.MACRO	MNE,REG
	 .BYTE	 ^O'OP+^O10*REG
	$=.
	.ENDM
	.ENDM

;  BYTEOP - generate macros for one-byte opcodes
	.MACRO	BYTEOP,MNE,OP
	.MACRO	MNE
	 .BYTE	 ^O'OP
	$=.
	.ENDM
	.ENDM

;  BWOP - generate macros for one-byte opcodes in both byte and word flavors
	.MACRO	BWOP,MNE,OP
	BYTEOP	MNE'B,OP!0
	BYTEOP	MNE'W,OP!1
	.ENDM

;  JMPOP - generate jump instructions with one-byte displacement
	.MACRO	JMPOP,MNE,OP
	.MACRO	MNE,DISP
	 .BYTE	 ^O'OP
	.DISP	DISP-.-1
	$=.
	.ENDM
	.ENDM

;  PORTOP - generate two-byte instruction containing one unsigned data byte
	.MACRO	PORTOP,MNE,OP
	.MACRO	MNE,PORT
	 .BYTE	 ^O'OP,	PORT
	$=.
	.ENDM
	.ENDM

;  MDRGRM - Generate mod-reg-r/m byte and displacement bytes as necessary
	.MACRO	MDRGRM,RG,MD,DISP
	....XX=^O400
	.IIF	IDN,MD,M     ....XX=<RG*^O10>+6
	.IIF	IDN,MD,R     ....XX=^O300+<RG*^O10>+DISP
	.IIF	IDN,MD,IBXSI ....XX=<RG*^O10>+0
	.IIF	IDN,MD,SBXSI ....XX=^O100+<RG*^O10>+0
	.IIF	IDN,MD,LBXSI ....XX=^O200+<RG*^O10>+0
	.IIF	IDN,MD,IBXDI ....XX=<RG*^O10>+1
	.IIF	IDN,MD,SBXDI ....XX=^O100+<RG*^O10>+1
	.IIF	IDN,MD,LBXDI ....XX=^O200+<RG*^O10>+1
	.IIF	IDN,MD,IBPSI ....XX=<RG*^O10>+2
	.IIF	IDN,MD,SBPSI ....XX=^O100+<RG*^O10>+2
	.IIF	IDN,MD,LBPSI ....XX=^O200+<RG*^O10>+2
	.IIF	IDN,MD,IBPDI ....XX=<RG*^O10>+3
	.IIF	IDN,MD,SBPDI ....XX=^O100+<RG*^O10>+3
	.IIF	IDN,MD,LBPDI ....XX=^O200+<RG*^O10>+3
	.IIF	IDN,MD,ISI   ....XX=<RG*^O10>+4
	.IIF	IDN,MD,SSI   ....XX=^O100+<RG*^O10>+4
	.IIF	IDN,MD,LSI   ....XX=^O200+<RG*^O10>+4
	.IIF	IDN,MD,IDI   ....XX=<RG*^O10>+5
	.IIF	IDN,MD,SDI   ....XX=^O100+<RG*^O10>+5
	.IIF	IDN,MD,LDI   ....XX=^O200+<RG*^O10>+5
;  Indirect on BP is illegal; we call this M mode
	.IIF	IDN,MD,SBP   ....XX=^O100+<RG*^O10>+6
	.IIF	IDN,MD,LBP   ....XX=^O200+<RG*^O10>+6
	.IIF	IDN,MD,IBX   ....XX=<RG*^O10>+7
	.IIF	IDN,MD,SBX   ....XX=^O100+<RG*^O10>+7
	.IIF	IDN,MD,LBX   ....XX=^O200+<RG*^O10>+7
	 .BYTE	 ....XX	; An A-type error here means bad mod-reg-r/m mode field
	.IF	EQ,<....XX&^O307>-006
	 .BYTE	 DISP&^O377,	DISP&^O177400/^O400
	.ENDC
	.IIF	EQ,<....XX&^O300>-^O100,.BYTE	DISP
	.IF	EQ,<....XX&^O300>-^O200
	 .BYTE	 DISP&^O377,	DISP&^O177400/^O400
	.ENDC
	.ENDM

;  .BYTES macro - check for signed 8-bit legality
	.MACRO	.BYTES,X
	.IF	NE,^C<X&^O177600!^O177>
	 .IIF	NE,X&^O177600,.ERROR X; is not a signed 8-bit value
	.ENDC
	 .BYTE	 X
	.ENDM

;  .DISP macro - check for 8-bit JMP displacement
	.MACRO	.DISP,X
	.IF	NE,^C<X&^O177600!^O177>
	 .IIF	NE,X&^O177600,.ERROR X; is not a label within 127 bytes of this loc
	.ENDC
	 .BYTE	 X
	.ENDM

	.LIST				;OK - done with generations macros
.PAGE
; Instruction set macros

;  dw-mod-reg-r/m format instruction definitions
	DWMRR	ADD,000
	DWMRR	 OR,010
	DWMRR	ADC,020
	DWMRR	SBB,030
	DWMRR	AND,040
	DWMRR	SUB,050
	DWMRR	XOR,060
	DWMRR	CMP,070
	DWMRR	MOV,210

;  mod-reg-r/m format instruction definitions
	DEFMRR	TESTB,204
	DEFMRR	TESTW,205
	DEFMRR	XCHGB,206
	DEFMRR	XCHGW,207
	DEFMRR	  LEA,215
	DEFMRR	  LES,304
	DEFMRR	  LDS,305

;  immediate to register/memory (byte/word) instructions
	IMMRM	  OR,200,1
	IMMRM	 AND,200,4
	IMMRM	 XOR,200,6
	IMMRM	 MOV,306,0
	IMMRM	TEST,366,0

;  immediate short/long/sign-extend format instructions
	IMMSL	ADD,200,0
	IMMSL	ADC,200,2
	IMMSL	SBB,200,3
	IMMSL	SUB,200,5
	IMMSL	CMP,200,7

;  shift, group 1, and group 2 instructions, etc.
	GRP12	   POP,217,0
	GRP12	 CALLI,377,2
	GRP12	LCALLI,377,3
	GRP12	  JMPI,377,4
	GRP12	 LJMPI,377,5
	GRP12	  PUSH,377,6
	GRPBW	   NOT,366,2
	GRPBW	   NEG,366,3
	GRPBW	   MUL,366,4
	GRPBW	  IMUL,366,5
	GRPBW	   DIV,366,6
	GRPBW	  IDIV,366,7
	GRPBW	   INC,376,0
	GRPBW	   DEC,376,1
	SHFTOP	   ROL,320,0
	SHFTOP	   ROR,320,1
	SHFTOP	   RCL,320,2
	SHFTOP	   RCR,320,3
	SHFTOP	   SHL,320,4
	SHFTOP	   SAL,320,4
	SHFTOP	   SHR,320,5
	SHFTOP	   SAR,320,7

;  Direct JUMP and CALL instructions, stack adjusting return instructions
	.MACRO	CALL,LABEL
	....XX=LABEL-.-3
	 .BYTE	 ^O350,	....XX&^O377,	....XX&^O177400/^O400
	$=.
	.ENDM

	.MACRO	JUMP,LABEL
	....XX=LABEL-.-3
	 .BYTE	 ^O351,	....XX&^O377,	....XX&^O177400/^O400
	$=.
	.ENDM

	.MACRO	LCALL,LABEL,SEGADR
	 .BYTE	 ^O232,	LABEL&^O377,	LABEL&^O177400/^O400
	 .BYTE	 SEGADR&^O377,	SEGADR&^O177400/^O400
	$=.
	.ENDM

	.MACRO	LJUMP,LABEL,SEGADR
	 .BYTE	 ^O352,	LABEL&^O377,	LABEL&^O177400/^O400
	 .BYTE	 SEGADR&^O377,	SEGADR&^O177400/^O400
	$=.
	.ENDM

	.MACRO	RETS,FUDGE
	 .BYTE	 ^O302,	FUDGE&^O377,	FUDGE&^O177400/^O400
	$=.
	.ENDM

	.MACRO	LRETS,FUDGE
	 .BYTE	 ^O312,	FUDGE&^O377,	FUDGE&^O177400/^O400
	$=.
	.ENDM

;  op-reg format instruction definitions
	OPREG	 INCR,100
	OPREG	 DECR,110
	OPREG	PUSHR,120
	OPREG	 POPR,130
	OPREG	XCHGR,220

;  op-segreg format instruction definitions
	SEGREG	PUSHS,006
	SEGREG	 POPS,007
	SEGREG	  SEG,046

;  MOVIR instructions - move immediate value to register
	.MACRO	MOVBIR,REG,IVAL
	 .BYTE	 ^O260+REG,	IVAL
	$=.
	.ENDM

	.MACRO	MOVWIR,REG,IVAL
	 .BYTE	 ^O270+REG,	IVAL&^O377,	IVAL&^O177400/^O400
	$=.
	.ENDM

;  Move byte/word to/from memory from/to accumulator instrucions
	.MACRO	MOVBFM,ADDR
	 .BYTE	 ^O240,	ADDR&^O377,	ADDR&^O177400/^O400
	$=.
	.ENDM

	.MACRO	MOVWFM,ADDR
	 .BYTE	 ^O241,	ADDR&^O377,	ADDR&^O177400/^O400
	$=.
	.ENDM

	.MACRO	MOVBTM,ADDR
	 .BYTE	 ^O242,	ADDR&^O377,	ADDR&^O177400/^O400
	$=.
	.ENDM

	.MACRO	MOVWTM,ADDR
	 .BYTE	 ^O243,	ADDR&^O377,	ADDR&^O177400/^O400
	$=.
	.ENDM

;  Move to/from segment register instructions
	.MACRO	MOVTS,REG,MOD,DISP
	 .BYTE	 ^O216
	MDRGRM	REG,MOD,DISP
	$=.
	.ENDM

	.MACRO	MOVFS,REG,MOD,DISP
	 .BYTE	 ^O214
	MDRGRM	REG,MOD,DISP
	$=.
	.ENDM

;  immediate-to-accumulator format instructions
	IMMACC	 ADDI,004
	IMMACC	  ORI,014
	IMMACC	 ADCI,024
	IMMACC	 SBBI,034
	IMMACC	 ANDI,044
	IMMACC	 SUBI,054
	IMMACC	 XORI,064
	IMMACC	 CMPI,074
	IMMACC	TESTI,250

;  one-byte instructions with no arguments
	BYTEOP	  DAA,047
	BYTEOP	  DAS,057
	BYTEOP	  AAA,067
	BYTEOP	  AAS,077
	BYTEOP	  NOP,220
	BYTEOP	  CBW,230
	BYTEOP	  CWD,231
	BYTEOP	 WAIT,233
	BYTEOP	PUSHF,234
	BYTEOP	 POPF,235
	BYTEOP	 SAHF,236
	BYTEOP	 LAHF,237
	BYTEOP	  RET,303
	BYTEOP	 LRET,313
	BYTEOP	 INT3,314
	BYTEOP	 INTO,316
	BYTEOP	 IRET,317
	BYTEOP	 XLAT,327
	BYTEOP	 LOCK,360
	BYTEOP	REPNE,362
	BYTEOP	REPNZ,362
	BYTEOP	  REP,363
	BYTEOP	 REPE,363
	BYTEOP	 REPZ,363
	BYTEOP	  HLT,364
	BYTEOP	  CMC,365
	BYTEOP	  CLC,370
	BYTEOP	  STC,371
	BYTEOP	  CLI,372
	BYTEOP	  STI,373
	BYTEOP	  CLD,374
	BYTEOP	  STD,375

;  one-byte opcodes that come in both byte and word flavors
	BWOP	MOVS,244
	BWOP	CMPS,246
	BWOP	STOS,252
	BWOP	LDOS,254
	BWOP	SCAS,256
	BWOP	INDX,354
	BWOP	OUTDX,356

;  pc-relative jump instructions
	JMPOP	    JO,160
	JMPOP	   JNO,161
	JMPOP	    JB,162
	JMPOP	  JNAE,162
	JMPOP	   JNB,163
	JMPOP	   JAE,163
	JMPOP	    JE,164
	JMPOP	    JZ,164
	JMPOP	   JNE,165
	JMPOP	   JNZ,165
	JMPOP	   JBE,166
	JMPOP	   JNA,166
	JMPOP	  JNBE,167
	JMPOP	    JA,167
	JMPOP	    JS,170
	JMPOP	   JNS,171
	JMPOP	    JP,172
	JMPOP	   JPE,172
	JMPOP	   JNP,173
	JMPOP	   JPO,173
	JMPOP	    JL,174
	JMPOP	  JNGE,174
	JMPOP	   JNL,175
	JMPOP	   JGE,175
	JMPOP	   JLE,176
	JMPOP	   JNG,176
	JMPOP	  JNLE,177
	JMPOP	    JG,177
	JMPOP	LOOPNZ,340
	JMPOP	LOOPNE,340
	JMPOP	 LOOPZ,341
	JMPOP	 LOOPE,341
	JMPOP	  LOOP,342
	JMPOP	  JCXZ,343
	JMPOP	   JMP,353

;  ESCape instructions
	.MACRO	ESC,N1,N2,MOD,DISP
	 .BYTE	 ^O330!N1
	MDRGRM	N2,MOD,DISP
	$=.
	.ENDM

;  ASCII adjust for multiply/divide instructions
	.MACRO	AAM
	 .BYTE	 ^O324,	^D10
	$=.
	.ENDM

	.MACRO	AAD
	 .BYTE	 ^O325,	^D10
	$=.
	.ENDM

;  I/O port and interrupt instructions
	PORTOP	 INT,315
	PORTOP	 INB,344
	PORTOP	 INW,345
	PORTOP	OUTB,346
	PORTOP	OUTW,347
.PAGE
; Assembler psuedo-ops - macros that track $ along with .

;  $ORG - set origin (establishes new values for both . and $)
	.MACRO	$ORG,X
	.=X
	$=X
	.ENDM

;  $BYTE - generate an initialized byte
	.MACRO	$BYTE,X
	 .BYTE	 X
	$=.
	.ENDM

;  $WORD - generate an initialized word
	.MACRO	$WORD,X
	 .BYTE	 <X>&^O377,	<X>&^O177400/^O400
	$=.
	.ENDM

;  $ASCII - generate an ASCII string
	.MACRO	$ASCII,X
	 .ASCII	 X
	$=.
	.ENDM

;  $ASCIZ - generate an ASCII string, zero-byte terminated
	.MACRO	$ASCIZ,X
	 .ASCIZ	 X
	$=.
	.ENDM

;  $RAD50 - generate a RAD50 string
	.MACRO	$RAD50,X
	 .RAD50	 X
	$=.
	.ENDM

;  $BLKB - reserve bytes of storage
	.MACRO	$BLKB,X
	 .BLKB	 X
	$=.
	.ENDM

;  $BLKW - reserve words of storage
	.MACRO	$BLKW,X
	 .BLKB	 <X>*2
	$=.
	.ENDM

	.LIST				;OK - Done with macros
	.EOT
 