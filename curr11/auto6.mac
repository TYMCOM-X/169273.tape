	.TITLE	AUTO6  - AUTO BAUD ROUTINES FOR TYPE 6
	.SBTTL	AUTO6  - NEXILIS/JRG

;These auto-baud detect routines use one port of a DZ11 or DZV11 Async Interface
;  as a high speed clock for timing detect events.  These routines may only be
;  used with DZ11 or DZV11 type interfaces.  One line on one DZ11 or DZV11
;  interface must be reserved for use as a clock.  Other auto-baud routines may
;  be mixed with this one in a node except for type 7 routine.  A node may
;  not use both type 6 and type 7 auto-baud routines!

	XLPAR
	CODE

;SUBROUTINE TO INITIALIZE THE FAST CLOCK
;	CALL	FSCINI

	INICAL	FSCINI

FSCINI:	MOV	#FSCLNX#+7010,@#FSCREG#+2;SETUP THE CLOCK LINE
	MOVB	#-1,@#FSCFLG#		;SETUP THE FLAG BYTE IN THE ADB
	RETURN				;AND RETURN

;SUBROUTINE TO INITIALIZE AUTO-BAUD DETECT ROUTINE
;	C(R1) = ADDRESS OF 2ND WORD IN DETECT TABLE
;	C(SD) = ADDRESS OF SDB
;	CALL	AINI6

AINI6::	MOV	#CHKRAT,SDTRC1#(SD)	;STORE INITIAL DISPATCH
	MOV	(R1),R1			;GET DETECT RATE
	BIC	#$T3IRT!$T3ORT,SDTRS3#(SD);Store it in the SDB
	BISB	R1,SDTRS3#(SD)
	BISB	R1,SDTRS3#+1(SD)
	MOV	#.LFSET,R0		;Setup the interface hardware
	CALL	TRMFNC#
	TBBN	$T0HWR,SDTRS0#(SD),2$	;HARD WIRED TERMINAL?
	MOV	#JIFX20#,R0		;NO-ALLOW 20 SECONDS FOR DETECT
	MOV	#BRDTMO#,R1
	CALL	TIMREQ#
2$:	MOV	#BAUDMS,SDTRIP#(SD)	;SETUP FOR FUNNY OUTPUT
	MOV	#OUTIDL#,SDTROD#(SD)
	CLRB	SDTRC3#+1(SD)
	MOVB	SDTRXA#(SD),R0		;GET INDEX FOR LINE ON INTERFACE
	CLR	R1			;GET BIT FOR LINE
	BISB	ASBBIT#(R0),R1
	SWAB	R1			;POSITION IT TO POKE THE BREAK BIT
	MOV	R1,SDTRC4#(SD)		;SAVE IT FOR INTERRUPT LEVEL (DO THIS
					;  HERE TO SAVE A FEW INSTRUCTIONS
					;  AT EACH CLOCK INTERRUPT!)
	SETPSW	#340			;;NO INTERRUPTS NOW
	MOV	FSCOUT,SDTRCP#(SD)	;;PUT THIS SDB INTO THE FUNNY OUTPUT
	MOV	SD,FSCOUT		;;  LIST
	BIS	#FSCBIT#,@#FSCREG#+4	;;START THE DZ INTERRUPTING IF NOT GOING
	CLRPSW				;;INTERRUPTS OK NOW
RTN002:	RETURN				;THATS ALL (THATS ENOUGH!)
	.PAGE
;SUBROUTINE TO RESET AUTO-DETECT ROUTINE - CALLED WHEN EVERYTHING MUST
;  BE STOPPED IMMEDIATELY
;	CALL	ARST6

ARST6::	SETPSW	#340			;;NO INTERRUPTS HERE!!
	MOV	FSCOUT,R0		;;GET FIRST SDB IN OUTPUT LIST
	BEQ	4$			;;IF LIST EMPTY
	CMP	R0,SD			;;IS IT OURS?
	BNE	2$			;;NO
	MOV	SDTRCP#(SD),FSCOUT	;;YES-REMOVE IT FROM THE LIST
	BR	12$			;;CONTINUE

;;HERE IF WE ARE NOT FIRST IN THE LIST

2$:	MOV	SDTRCP#(R0),R1		;;GET NEXT IN LIST
	BNE	5$			;;GO ON IF MORE THERE
4$:	CLRPSW				;;END OF LIST-INTERRUPTS OK
	BR	ARST6B

5$:	CMP	R1,SD			;;IS THIS ONE OURS?
	BEQ	6$			;;YES
	MOV	R1,R0			;;NO-ADVANCE POINTER
	BR	2$			;;AND CONTINUE

;;HERE WITH MATCH

6$:	MOV	SDTRCP#(SD),SDTRCP#(R0)	;;REMOVE FROM LIST
12$:	CLRPSW				;;INTERRUPTS OK NOW
	MOV	SDTRAD#(SD),R1		;GET ADDRESS OF ADB FOR LINE
	BIC	SDTRC4#(SD),@ADBTDR#(R1);MAKE SURE LINE IS LEFT IN GOOD STATE
	CLR	SDTRCP#(SD)		;CLEAR OUT THE POINTERS
	CLR	SDTRIP#(SD)
ARST6B:	TBBE	$T6FSC,SDTRS6#(SD),2$	;ARE WE USING THE FAST CLOCK?
	CALL	STPFSC			;YES-STOP THAT!
2$:	MOV	#HAVRAT,R1		;CLEAR ALL POSSIBLE TIMERS
	CALL	TIMKIL#
	MOV	#BRDTMO#,R1
	CALL	TIMKIL#
	MOV	#SECTMO,R1
	CJMP	TIMKIL#
	.PAGE
;SUBROUTINE TO STOP USING THE FAST CLOCK
;	CALL	STPFSC

STPFSC:	SETPSW	#340			;;NO INTERRUPTS NOW
	BIC	#$T6FSC,SDTRS6#(SD)	;;NOT USING FAST CLOCK NOW!
	DECB	FSCUSR			;;REDUCE FAST CLOCK USER COUNT
	BGE	2$			;;JUST TO BE SAFE!!
	FSTOP	BCC			;;[Bad Clock Count]

2$:	CLRPSW				;;INTERRUPTS OK NOW
	RETURN				;THATS ALL
	.PAGE
;HERE WHEN DETECT CHARACTER RECEIVED WHEN DETECT CODE IS IDLE
;	C(R0) = CHARACTER
;	C(R1) = BAUD RATE CODE
;	C(SD) = ADDRESS OF SDB
;	CALL	CHKRAT

CHKRAT:;	ASL	R1			;ADJUST FOR WORD INDEXING
	MOV	ATOTXX#(R1),R3		;GET POINTER TO TABLE
	ADD	#6,R3			;POINT TO FIRST ENTRY
	BR	AUTO0			;CONTINUE

;HERE WITH DETECT CHARACTER WHEN EXPECTING SECONDARY CHARACTER
;	C(R0) = CHARACTER
;	C(SD) = ADDRESS OF SDB
;	CALL	CHKSND

CHKSND:	CLR	R1			;CALCULATE TIME INTERVAL
	BISB	FSCTIC,R1
	CALL	STPFSC			;STOP THE FAST CLOCK
	CLR	R2
	BISB	SDTRC2#+1(SD),R2
	SUB	R2,R1
	BGE	2$
	ADD	#400,R1
2$:	MOVB	SDTRC2#(SD),R2		;GET SECONDARY TABLE INDEX
	MOV	SECTBL#(R2),R3		;GET ADDRESS OF SECONDARY TABLE
AUTO0:	CMP	#CHKSND,SDTRC1#(SD)	;ARE WE SCANNING A SECONDARY TABLE?
	BNE	4$			;NO-GO ON
	CMPB	R1,(R3)+		;YES-LESS THAN MINIMUM TIME?
	BLT	AUTO7			;YES-RESET DETECT
	CMPB	R1,(R3)+		;GREATER THAN MAXIMUM TIME?
	BLE	4$			;NO-WE ARE IN THE WINDOW!
	ADD	#6,R3			;NO-BUMP TO NEXT ENTRY
	BR	AUTO5			;AND CONTINUE

;HERE IF WE ARE IN THE TIME WINDOW FOR THIS ENTRY

4$:	MOV	R0,R2			;COPY CHARACTER
	BICB	(R3)+,R2		;REMOVE DON'T CARE BITS
	CMPB	(R3)+,R2		;THIS ONE?
	BEQ	AUTO8			;YES
	INC	R3
AUTO4:	ADD	#3,R3			;BUMP TO NEXT ENTRY
AUTO5:	CMPB	#377,(R3)		;MORE THERE?
	BNE	AUTO0			;YES-CONTINUE
AUTO7:	MOV	#SECTMO,R1		;CLEAR POSSIBLE TIMER
	CALL	TIMKIL#
AUTO7A:	MOV	#CHKRAT,SDTRC1#(SD)	;NO-RESET DETECT DISPATCH
	RETURN				;AND RETURN

;HERE WITH MATCH ON THE CHARACTER

AUTO8:	MOVB	(R3)+,R1		;GET FLAGS
	BPL	AUTO9			;GO ON IF DON'T CARE ABOUT FRAMING
	TBBN	100,R1,14$		;SHOULD THERE BE A FRAMING ERROR?
	TST	R0			;NO-WAS THERE ONE?
	BMI	AUTO4			;YES-NOT A MATCH!
	BR	AUTO9			;NO-GO ON

;HERE IF SHOULD HAVE A FRAMING ERROR

14$:	TST	R0			;WAS THERE A FRAMING ERROR?
	BPL	AUTO4			;NO-NO MATCH!

;HERE WITH MATCH ON EVERYTHING

AUTO9:	MOVB	(R3),R1			;YES-GET RATE
	SWAB	R1			;IN BOTH HALVES
	BISB	(R3)+,R1
	BNE	22$			;GO ON IF FINISHED NOW
	SETPSW	#340			;;NEED TO GET SECONDARY CHARACTER
	INCB	FSCUSR			;;START THE FAST CLOCK
	BIS	#FSCBIT#,@#FSCREG#+4	;;
	BIS	#$T6FSC,SDTRS6#(SD)	;;REMEMBER WE ARE USING THE FAST CLOCK
	CLRPSW				;;INTERRUPTS OK NOW
	MOV	#CHKSND,SDTRC1#(SD)	;CHANGE DISPATCH FOR SECONDARY STUFF
	MOVB	(R3),R1			;GET INDEX FOR SECONDARY TABLE
	MOVB	R1,SDTRC2#(SD)		;SAVE FOR NEXT TIME
	MOV	#10.,R0			;GET TIMEOUT TIME
	MOV	#SECTMO,R1		;AND TIMEOUT ADDRESS
	MOVB	FSCTIC,SDTRC2#+1(SD)	;SAVE CURRENT FAST TIME
	CJMP	TIMREQ#			;START TIMER AND LEAVE

;HERE WHEN RATE IS FINALLY KNOWN

22$:	PUSH	R3			;SAVE POINTER
	BIC	#$T3IRT!$T3ORT,SDTRS3#(SD);STORE RATE IN SDB
	BIS	R1,SDTRS3#(SD)
	MOV	SDTRIP#(SD),R0		;ARE WE OUTPUTING A MESSAGE?
	BEQ	24$			;NO
	CMP	R0,#BAUDME		;MAYBE-MAKE SURE!
	BHI	24$			;FALSE ALARM (VERY STRANGE!)
	SETPSW	#340			;;NO INTERRUPTS NOW
	TST	SDTRIP#(SD)		;;CHECK FOR RACE
	BEQ	23$			;;OPPS!
	MOVB	#-40,SDTRC3#+1(SD)	;;SET STATE TO STOP AFTER CURRENT BYTE
23$:	CLRPSW				;;INTERRUPTS OK NOW
24$:	CALL	ARST6B			;CLEAR ALL POSSIBLE TIMERS
	MOVB	@0(SP),R0		;GET TERMINAL TYPE
	BMI	26$			;IF SHOULD NOT SET IT
	CALL	SETTTP#			;SETUP THE TERMINAL TYPE PARAMETERS
	  NOP				;Should not fail!
26$:	MOV	#.LFSET,R0		;SETUP THE INTERFACE HARDWARE
	CALL	TRMFNC#
	INC	(SP)			;POINT TO CODE
	MOVB	@(SP)+,SDTRXC#(SD)	;STORE CODE IN THE SDB
	MOV	#RTN002,SDTRC1#(SD)	;SET DISPATCH TO IGNORE EVERYTHING!
	MOV	#HAVRAT,R1		;DELAY FOR 1/2 SECOND
	MOV	#JIFO2#,R0
	CJMP	TIMREQ#

;HERE 1/2 SECOND AFTER BAUD RATE IS DETERMINED

HAVRAT:	CALL	ARST6			;RESET TIMERS
	JMP	BRDRDY#			;AND LET TRM FINISH UP

;HERE ON SECONDARY DETECT TIMEOUT

SECTMO:	CALL	STPFSC			;STOP THE FAST CLOCK
	MOVB	SDTRC2#(SD),R2		;GET INDEX FOR SECONDARY TABLE
	MOV	SECTBL#(R2),R3		;GET ADDRESS OF SECONDARY TABLE
	TSTB	(R3)			;IS THIS A DEFAULT ENTRY?
	BNE	AUTO7A			;NO-FALSE ALARM-RESET US
	ADD	#5,R3			;YES-POINT TO DATA
	BR	AUTO9			;AND GO SET THE RATE
	.PAGE
	.SBTTL	AUTO6  - INTERRUPT LEVEL ROUTINES

;CLOCK INTERRUPT ROUTINE - THIS ROUTINE IS CALLED BY THE DZ11 DRIVER WHENEVER
;  IT HAS AN INTERRUPT FOR THE SPECIAL CLOCK PORT - REGISTERS ARE SET UP AS
;  INDICATED BUT THE ONLY ONE WE REALLY CARE ABOUT IS R1!
;	C(R0) = DZ11 LINE INDEX * 400 FOR CLOCK PORT
;	C(R1) = FUNCTION CODE
;	C(R2) = PORT INDEX * 2 FOR CLOCK PORT
;	C(R3) = *** NOT PRESERVED ***
;	C(R4) = ADDRESS OF ADB FOR CLOCK PORT
;	C(SD) = *** NOT PRESERVED ***
;	CALL	FSCINT
;  THIS SUBROUTINE MUST PRESERVE R3,R4, AND SD
;  THIS SUBROUTINE USES SEVERAL TERMINAL SDB WORDS FOR ITS DATA.  THESE ARE
;  WORDS WHICH ARE USED BY THE TERMINAL SERVICE FOR OTHER THINGS, BUT THIS
;  IS OK SINCE THEY ARE ONLY USED FOR INPUT OR FOR COMMAND MODE.  SINCE THIS
;  ROUTINE IS ONLY ACTIVE WHEN IN BAUD DETECT STATE, THERE IS NO POSSIBLE
;  CONFLICT (WE HOPE).
;    THESE WORDS ARE USED AS FOLLOWS:
;	C(SDTRIP(SD))   = POINTER TO CURRENT OUTPUT BYTE (WORD)
;	C(SDTRCP(SD))   = ADDRESS OF NEXT SDB IN OUTPUT LIST (WORD)
;	C(SDTRC3(SD))   = BIT MASK FOR OUTPUT STREAM (BYTE)
;	C(SDTRC3+1(SD)) = OUTPUT STATE COUNTER (BYTE)
;	C(SDTRC4(SD))   = BIT TO CHANGE IN DZ11 OUTPUT CONTROL REGISTER (WORD)

FSCINT::TST	R1			;OUTPUT DONE?
	BNE	30$			;NO-IGNORE IT
	DEC	FSCCNT			;YES-TIME FOR OUTPUT STUFF?
	BGT	20$			;NO-GO ON
	MOV	#4,FSCCNT		;YES-RESET COUNT
	MOV	#FSCOUT,R0		;MAKE FAKE LIST PRED.
	SUB	#SDTRCP#,R0
2$:	MOV	R0,R2			;ADVANCE POINTER
3$:	MOV	SDTRCP#(R2),R0		;GET NEXT SDB IN OUTPUT LIST
	BEQ	20$			;IF NO MORE
	MOV	SDTRAD#(R0),R1		;GET ADB ADDRESS FOR THE SDB
	TSTB	SDTRC3#+1(R0)		;CHECK STATE
	BGT	16$			;IF NEED MORE DELAY
	BEQ	11$			;IF NEED START BIT
	TSTB	SDTRC3#(R0)		;FINISHED WITH CHARACTER?
	BNE	7$			;NO-GO ON
	CMPB	#-40,SDTRC3#+1(R0)	;YES-ARE WE BEING STOPPED?
	BGE	5$			;YES
	INC	SDTRIP#(R0)		;NO-ADVANCE POINTER
	TSTB	@SDTRIP#(R0)		;END OF STRING?
	BNE	6$			;NO
5$:	MOV	SDTRCP#(R0),SDTRCP#(R2)	;YES-REMOVE THIS SDB FROM THE LIST
	CLR	SDTRCP#(R0)
	CLR	SDTRIP#(R0)
	BIC	SDTRC4#(R0),@ADBTDR#(R1);MAKE SURE WE LEAVE THE LINE IN A GOOD
					;  STATE!
	BR	3$			;GO LOOK FOR MORE TO DO

;HERE TO OUTPUT THE STOP BIT

6$:	MOVB	#30.,SDTRC3#+1(R0)	;RESET STATE
	BR	10$			;GO OUTPUT STOP BIT

;HERE FOR NEXT BIT IN CHARACTER

7$:	BITB	SDTRC3#(R0),@SDTRIP#(R0);IS THE BIT SET?
	BEQ	12$			;NO
10$:	BIC	SDTRC4#(R0),@ADBTDR#(R1);YES-SET LINE TO MARK
	BR	14$			;CONTINUE

;HERE TO OUTPUT START BIT

11$:	CLRB	SDTRC3#(R0)		;CLEAR MASK BYTE
	SEC				;AND SET C SO ROLB BELOW WILL BRING
					;  IN THE LOWER BIT!

;HERE IF BIT IS 0

12$:	BIS	SDTRC4#(R0),@ADBTDR#(R1);SET LINE TO SPACE
14$:	ROLB	SDTRC3#(R0)		;ADVANCE MASK (C WILL BE CLEAR UNLESS
					;  WE CAME FROM 11$!!)
16$:	DECB	SDTRC3#+1(R0)		;ADVANCE STATE
	BR	2$			;CONTINUE

;HERE AFTER DOING ALL OF THE OUTPUT STUFF IF NEEDED THIS INTERRUPT

20$:	INC	FSCTIC			;BUMP THE TICK COUNT
	MOV	FSCOUT,R2		;DO WE STILL NEED THE CLOCK?
	BIS	FSCUSR,R2
	BEQ	22$			;NO-GO STOP THE CLOCK
	MOVB	#377,@#FSCREG#+6	;YES-"OUTPUT" A CHARACTER
	RETURN				;THATS ALL

;HERE IF SHOULD STOP THE FAST CLOCK NOW

22$:	BIC	#FSCBIT#,@#FSCREG#+4	;CLEAR THE XMITER ENABLE BIT
30$:	RETURN				;AND RETURN
	.PAGE
	.SBTTL	AUTO6  - PURE DATA

	PURE

;DEFINE MACRO WHICH GENERATES THE PARITY BIT FOR A CHARACTER

	.LIST	MEB

	.MACRO	CHAR  CCC
CC=!CCC
$M=!1
$X=!0
	.REPT	7
.IF NE CC&$M
  $X=!$X+1
.ENDC
$M=!$M*2
	.ENDR
.IF NE $X&1
  CC=!CC!200
.ENDC
	.BYTE	CC
	.ENDM

;GENERATE THE BIT STRING FOR THE MESSAGES

BAUDMS:	CHAR	177
	CHAR	177
	CHAR	CR
	CHAR	LF
	CHAR	177
	CHAR	177
	CHAR	177
	CHAR	177
	.IRPC	C,<please type your terminal identifier>
.IF NB C
	CHAR	''C
.IFF
	CHAR	SPA
.ENDC
	.ENDM
BAUDME:	.BYTE	0

	.EVEN
	.PAGE
	.SBTTL	AUTO6  - IMPURE DATA

	IMPURE

FSCUSR::.WORD	0		;FAST CLOCK USER COUNT
FSCTIC::.WORD	0		;FAST CLOCK TICK COUNTER
FSCCNT:	.WORD	0		;FAST CLOCK 4 TICK COUNTER
FSCOUT:	.WORD	0		;FAST CLOCK OUTPUT SDB LIST HEAD POINTER

	.END
 