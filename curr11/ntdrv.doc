




                   Nexilis Systems, Inc.
                      Tucson, Arizona



                               .+@               
                            .+@@@@               
                         .+@@@@@@@               
                      .+@@@@@@@@@@               
                   .+@@@@@@@@@@@@@@@@@@@@@@@@@@+.
                .+@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
          @@@@@@`+@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
          @@@@@@   `+@@@@@@@@@@@@@@@@@@@@@@@@@@@@
          @@@@@@      `+@@@@@@@@@@         @@@@@@
          @@@@@@         `+@@@@@@@         @@@@@@
          @@@@@@            `+@@@@         @@@@@@
          @@@@@@               `+@         @@@@@@
          @@@@@@                           @@@@@@
          @@@@@@                           @@@@@@
          @@@@@@                           @@@@@@
          @@@@@@                           @@@@@@
          @@@@@@                           @@@@@@
          @@@@@@         @+.               @@@@@@
          @@@@@@         @@@@+.            @@@@@@
          @@@@@@         @@@@@@@+.         @@@@@@
          @@@@@@         @@@@@@@@@@+.      @@@@@@
          @@@@@@@@@@@@@@@@@@@@@@@@@@@@+.   @@@@@@
          @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@+.@@@@@@
          @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@+'      
          `+@@@@@@@@@@@@@@@@@@@@@@@@@@+'         
                         @@@@@@@@@@+'            
                         @@@@@@@+'               
                         @@@@+'                  
                         @+'                     



         NTDRV - The NEXILIS RSX-11M Network Driver

          Copyright (C) 1980 Nexilis Systems, Inc.

NTDRV - The NEXILIS RSX-11M Network Driver            Page 1
Nexilis Systems, Inc.


1.0  Introduction

The Nexilis network driver is designed to interface  a  host
PDP-11 running the RSX-11M Version 3.2 operating system to a
Nexilis network (NEXNET) node.  It is a loadable or resident
driver  which can co-exist with the terminal driver supplied
by Digital Equipment Corporation.  The features of the  net-
work  driver match the capabilities of the full-feature half
duplex terminal driver.  For a complete description  of  the
half  duplex terminal driver refer to chapter 3 in volume 5A
(I/O Drivers) of the RSX-11M Version 3.2 software notebooks.



2.0  Restrictions

The following restrictions are currently placed on the  net-
work driver:

     1.  The driver will run only on memory  mapped  RSX-11M
         systems.

     2.  AST support must have been included during SYSGEN.

     3.  Terminal hold screen mode is not supported.

     4.  Escape sequence mode is not supported.




3.0  Additional Features

In addition to the normal  half-duplex  terminal  QIO  func-
tions,  the  driver supports a small number of special func-
tions to facilitate graceful interaction between the RSX-11M
user task and the network.  There are three new subfunctions
of the QIO device attachment function (IO.ATT).   The  first
allows  a  privileged  user  to gain exclusive access to the
DR-11C for the express purpose of loading  a  runnable  node
image into a host-adjacent NEXNET node.  The second subfunc-
tion allows a user task to establish a connection with a re-
mote  NEXNET device.  The third IO.ATT subfunction enables a
user task to restrict data  flow  on  a  network  connection
(especially to another host computer).



3.1  NF.LDM - Attach for Load Mode

At times it is desirable to load a new  node  image  into  a
NEXNET node directly connected to the RSX-11M host computer.
When it becomes necessary to load a runnable node image into

NTDRV - The NEXILIS RSX-11M Network Driver            Page 2
Nexilis Systems, Inc.


a host-adjacent NEXNET node, a privileged task may perform a
special network attach subfunction.


                            NOTE

               For   information   concerning
               NEXNET  bootstrap message for-
               mats, consult the NEXNET boot-
               strap loading documentation.


The subfunction NF.LDM (200(8)) to the QIO  IO.ATT  function
allows the attaching privileged task exclusive access to the
DR-11C device registers and vectors.  For  the  duration  of
the  attachment,  the driver is prevented from accessing the
DR-11C device registers or vectors.  The  driver  will  also
ignore  any  interrupt by the DR-11C while the load mode at-
tach is in effect.

In addition to the subfunction bit, the  task  supplies  the
driver  with  the number of the interface to attach to.  For
this reason, the QIO directive must specify  an  I/O  status
block.   The  interface number must be contained in the byte
following the I/O status block (I/O status block + 4).

Interface numbers begin at zero for the first network inter-
face  and  increment  by  one for each successive interface.
The device register and vector addresses for each  interface
are  determined  by  the hardware.  The number of interfaces
and the register and vector addresses for each  network  in-
terface  are  defined  in  the  network driver configuration
source file NTCFG.MAC.  The number of interfaces is  defined
by the symbol N$$T11.  The address of the control status re-
gister for the first interface  is  defined  by  the  symbol
N0CSR,  for the second interface by the symbol N1CSR, and so
on.  Likewise, the interrupt vector address  for  the  first
interface is defined by the symbol N0VEC, for the second in-
terface by the symbol N1VEC, etc.

It is the responsibility of the privileged task to save  the
contents of the device interrupt vectors before beginning to
load the NEXNET node.  The task should then change the  dev-
ice  vectors  to  address its own interrupt service routines
while loading is in progress.  After the  load  sequence  is
complete,  it  is  the  task's responsibility to restore the
device vectors to their  original  values  before  detaching
from the interface.

NTDRV - The NEXILIS RSX-11M Network Driver            Page 3
Nexilis Systems, Inc.


3.2  NF.CON - Attach for Connection to Remote NEXNET Device

The NF.CON (100(8)) subfunction has been added  to  the  QIO
device  attachment  function (IO.ATT) to allow a task on RSX
to connect to a remote NEXNET device.  The  QIO  device  at-
tachment  directive specifying the NF.CON subfunction initi-
ates a request to connect to the desired remote NEXNET  dev-
ice.   If  the  connection  request is granted by the remote
NEXNET device, the device attachment will succeed.   If  the
connection  request fails for any reason, an error code will
be returned in the I/O status block specified by the  IO.ATT
QIO directive.

The device attachment QIO  directive  must  specify  an  I/O
status block.  The task uses the I/O status block to receive
status information from the driver as to the success or fai-
lure  of  the connection request.  The task must also supply
the driver with information regarding the destination NEXNET
device  to  which  it  will  connect.  The task uses the ten
bytes following the I/O status block as a formatted block to
supply the driver with the necessary information.

To establish a connection from an RSX-11M task to  a  NEXNET
device  using  the network driver, the following information
must be known about the destination NEXNET device:

     1.  The NEXNET device name -- one of:

             HS - Host or Gateway
             ST - Status Device
             TR - Terminal
             WD - Load Device


     2.  The socket number on the device

     3.  The NEXNET node name

     4.  The connection privilege level

The format of the I/O status block for the directive is:

	IOSB:	.BLKW	2	; I/O status block
		.BLKB	2	; ASCII device name
		.BLKB	1	; Socket number
		.BLKB	6	; ASCII node name
		.BLKB	1	; Privilege level

A socket on NEXNET is analogous to a device unit on RSX-11M.
For  example,  each user terminal plugged into a NEXNET node
is directly associated with (and  referenced  by)  a  unique
terminal  socket  number.   Likewise  for multiplexed NEXNET
devices such as hosts and gateways (to other networks)  each

NTDRV - The NEXILIS RSX-11M Network Driver            Page 4
Nexilis Systems, Inc.


"logical  channel"  on  the  interface  is assigned a unique
socket number on that device.

It is usually meaningful to address specific sockets only on
devices for which a socket number directly identifies a uni-
que hardware device (e.g.  terminals).  When  socket  number
zero  is  specified for a connection to a NEXNET device, the
destination NEXNET node will select an available  socket  on
the  designated  device.   This is the normal procedure when
connecting to a host or gateway on NEXNET.

Access to a NEXNET device can be restricted by assigning  it
a  connection privilege level during node configuration.  By
configuring a device with a high connection privilege level,
the use of a device can be confined to a particular class of
user.  Some devices can be configured  to  allow  increasing
levels  of access according to the privilege level specified
in the connection request.

The NEXNET connection privilege level is specified by an un-
signed  8-bit number.  A privileged RSX-11M user may specify
the maximum NEXNET privilege level of 377(8).   The  highest
NEXNET  privilege  level  that a non-privileged RSX-11M user
may specify is 200(8).  If a non-privileged user task speci-
fies  a privilege level greater than it is allowed, the pri-
vilege level will be reduced in the task's I/O status  block
to the maximum allowable level.



3.3  NF.AST - Attach for Special Network AST Service

Another device attachment (IO.ATT) subfunction  allows  data
flow  to be restricted gracefully for the duration of a con-
nection from an RSX task to a network  device  which  has  a
high  data rate (e.g.  another host computer).  The subfunc-
tion NF.AST (040(8)) specifies that for the duration of  the
attachment, unsolicited input will cause the task to receive
a network AST.  This subfunction bit is  mutually  exclusive
of and may not be specified in conjunction with the terminal
TF.AST subfunction bit.

The AST caused  by  unsolicited  input  during  attach  with
NF.AST  subfunction acts very much like the AST under attach
with TF.AST.  The difference is that instead of receiving  a
character on the stack, the user task receives a byte count.
This count is the number of unsolicited  bytes  buffered  by
the  driver  for  the task.  It is the responsibility of the
task to issue a QIO read with no echo directive (IO.RNE)  to
input the buffered data.

NTDRV - The NEXILIS RSX-11M Network Driver            Page 5
Nexilis Systems, Inc.


Only one network AST will be queued for the task at a  time.
If  the  task  fails to read all of the data buffered by one
AST, another network AST will be queued for the task.   This
will  continue while there is unsolicited input buffered for
the task.

While unsolicited input remains buffered for the  task,  the
network  will  be blocked from sending additional input.  In
this way the flow of data from  another  host  can  be  con-
trolled  more gracefully without rapidly exhausting the exe-
cutive pool space.



4.0  Structure of the Driver

The basic philosophy of the structure of the Nexilis network
driver for RSX-11M is to separate the driver sources by log-
ical function.  There are three parts of  the  driver:   the
data   base   (NTDAT);    the  RSX-11M  executive  interface
(NTDRV1);  and the network  interface  (NTDRV2).   The  data
base  contains  the necessary data structure for the driver.
The  RSX-11M  executive  interface  communicates  with   the
RSX-11M  I/O  system (QIO).  The network interface exchanges
messages with the NEXNET node over the DR-11C.



4.1  Source Files

There are five source files for the network driver:

     1.  NTCFG.MAC  - Network interface configuration

     2.  NTDEF.MAC  - Common symbol definitions

     3.  NTDAT.MAC  - Data base

     4.  NTDRV1.MAC - RSX-11M executive interface

     5.  NTDRV2.MAC - Network interface

There are two other assembly input files necessary which are
part of the RSX-11M executive:

     1.  EXEMC.MLB  - Executive macro library

     2.  RSXMC.MAC  - RSX-11M configuration


NTDRV - The NEXILIS RSX-11M Network Driver            Page 6
Nexilis Systems, Inc.


4.1.1  NTCFG.MAC  - Network Interface Configuration File - 

The network interface configuration file  contains  informa-
tion  regarding  the DR-11C link(s) between the RSX-11M host
and the NEXNET node(s).  As  described  earlier,  there  are
symbols  defined for the number of intefaces, the device re-
gister addresses, and the device interrupt vector addresses.
There  are also symbols for the number of sockets defined on
each interface,  for  the  size  of  executive  pools  space
buffers  used  during  input and output, and for the maximum
privilege level allowed to non-privileged users.



4.1.2  NTDEF.MAC  - Common Symbol Definitions - 

The common symbol definition file is used, as its  name  im-
plies,  for commonly used macros, bit definitions, and other
widely used symbol values.  As such, it is used as a  prefix
file  during  assembly  of the three functional parts of the
driver (data base, executive interface, and  network  inter-
face).   Beside  the common symbol definitions, the load se-
quence of the .PSECT's is also defined in this file.



4.1.3  NTDAT.MAC  - Data Base - 

The data base file contains the storage allocation  for  the
data structure used by the driver and the RSX-11M executive.
Along with the definitions of the DCB, UCB's, and SCB's, the
file contains a small amount of executable code and some ad-
ditional  data.   The  interrupt  entry   points   and   the
once-a-second  clock service entry point are embedded in the
data base file.  The controller table (which in this  driver
contains  pointers  to the SCB's) is also defined within the
data base file.



4.1.4  NTDRV1.MAC - RSX-11M Executive Interface - 

The executive interface source file contains all of the code
used  to  communicate  with  the RSX-11M executive.  For the
most part, the module is concerned with the QIO  system  and
processing  I/O  requests.   The  executive  interface  also
passes information to the MCR as well  as  interacting  with
the executive buffer management routines.

NTDRV - The NEXILIS RSX-11M Network Driver            Page 7
Nexilis Systems, Inc.


4.1.5  NTDRV2.MAC - Network Interface - 

The network interface file contains the  code  necessary  to
communicate  with a NEXNET node via a DR-11C 16-bit parallel
interface.  The module communicates with NEXNET nodes  using
the  Nexilis 16-bit parallel host protocol.  The network in-
terface moves data between the network  and  RSX-11M,  tran-
slating the message formats appropriately.



4.2  Program Sections

The  driver  is  sectioned  into   nine   program   sections
(.PSECT's)  according to functional content.  In addition to
dividing the driver by logical content, the program sections
also  provide  an  ordered  structure  for task building the
driver.  The correct order of the .PSECT's must  be  mainta-
ined  for  predictable  results.  A brief description of the
order and contents of the nine .PSECT's follows:

     1.  . BLK. - Unnamed (not used)

     2.  LOCODE - Code which must be resident in  the  lower
         4K segment

     3.  LODATA - Data which must be resident in  the  lower
         4K segment

     4.  HICODE - Code which can reside in the upper 4K seg-
         ment

     5.  HIDATA - Data which can reside in the upper 4K seg-
         ment

     6.  UOFF   - Terminal parameter UCB offset table  which
         can reside in the upper 4K segment

     7.  NPRM   - Terminal parameter network parameter table
         which can reside in the upper 4K segment

     8.  BVAL   - Terminal parameter bit value  table  which
         can reside in the upper 4K segment

     9.  DATBAS - The data base (which is relocated into the
         executive pool space)


NTDRV - The NEXILIS RSX-11M Network Driver            Page 8
Nexilis Systems, Inc.


5.0  Building the Driver

In order to obtain a driver task image that  can  be  LOAded
into  RSX-11M,  the  driver  source  files must be assembled
using MACRO-11 and the module object files  must  be  linked
together using the taskbuilder (TKB).



5.1  Assembly

In order to assemble the three functional modules,  the  two
RSX-11M  executive  files  must  be  present  (EXEMC.MLB and
RSXMC.MAC).  Usually the file EXEMC.MLB can be found in  UIC
[1,1]  on  the  system  disk.  The file RSXMC.MAC is created
during SYSGEN in account [11,10] on the  system  disk.   The
five network interface source files must also be made acces-
sible before assembling.

The following example assumes that all of the necessary  as-
sembly input files are on disk in the same account.  Consult
the MACRO-11 manual for the  syntax  to  supply  the  actual
input  file  UIC's.   With  all of the files accessible, the
following commands can be used to assemble the  three  func-
tional parts of the network driver:

         MAC>NTDAT=EXEMC/ML,RSXMC,NTCFG,NTDEF,NTDAT
         MAC>NTDRV1=EXEMC/ML,RSXMC,NTCFG,NTDEF,NTDRV1
         MAC>NTDRV2=EXEMC/ML,RSXMC,NTCFG,NTDEF,NTDRV2




5.2  Task Building

Once the three functional modules of the  driver  have  been
assembled,  the  driver  must be taskbuilt (linked).  If the
example shown before is used, the three object files created
will be:

     1.  NTDAT .OBJ - The data base

     2.  NTDRV1.OBJ - The RSX-11M executive interface

     3.  NTDRV2.OBJ - The network interface

In addition to the three object  files  assembled  from  the
driver  sources, two executive object files must be included
to build the task image.  The two files required are:

NTDRV - The NEXILIS RSX-11M Network Driver            Page 9
Nexilis Systems, Inc.


     1.  RSX11M.STB - RSX-11M executive symbol table

     2.  EXELIB.OLB - RSX-11M executive object li

The RSX-11M executive symbol table can be found on the  sys-
tem disk in account [1,54].  The executive object library is
usually located in UIC [1,1] also on the system disk.

When all of the object files are accessible,  the  following
TKB  command  sequence  may  be used to taskbuild the driver
image:

         TKB>NTDRV/SQ/-HD/-MM,NTDRV/-SP,NTDRV=
         TKB>NTDRV1,NTDRV2,NTDAT
         TKB>[1,54]RSX11M.STB/SS
         TKB>[1,1]EXELIB.OLB/LB
         TKB>/
         ENTER OPTIONS:
         TKB>STACK=0
         TKB>PAR=GEN:120000:40000
         TKB>//

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               a@
