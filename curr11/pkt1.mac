	.TITLE	PKT1  PACKET SERVICE
	.SBTTL	PKT1   - NEXILIS/JRG

	XLPAR			;DON'T LIST PARAMETER FILE

	CODE

;THIS MODULE CONTAINS ROUTINES WHICH MANAGE PACKET STORAGE WITHIN THE NODE.
;INCLUDED ARE BOTH CHARACTER AND PACKET LEVEL ROUTINES.

	.SBTTL	PKTINI - INITIALIZE PACKET SPACE

;Subroutine to initialize packet space
;	CALL	PKTINI

PKTINI:: MOV	NUMPKT,SD		;GET NUMBER OF PACKETS
	MOV	SD,PKFCNT		;INITIALIZE FREE LIST COUNT
	MOV	SD,PKFCMN
	MOV	SD,PKFHLF		;SET UP HALF FULL CELL
	ASR	PKFHLF			;DIVIDE BY 2
	MOV	#PKTBGN#-1,R2		;GET ADDRESS OF FIRST PACKET
	BIC	#77,R2
1$:	ADD	#100,R2			;ADVANCE TO NEXT PACKET
	TST	(R2)			;DOES THIS MEMORY CHUNK EXIST?
	NXMJMP	1$			;SKIP OVER NON-EXISTANT MEMORY
	MOV	R2,PKTLST		;SET UP TAIL POINTER	
	CLR	R1			;SET LAST PACKET ADDRESS TO ZERO
2$:	MOV	R2,R3			;GET ADDRESS OF NEXT PACKET
3$:	MOV	R3,R2			;ADDRESS OF START OF PACKET
	ADD	#PKTWDS*2,R2		;ADDRESS OF NEXT PACKET
	MOV	R1,(R3)+		;STORE LINK TO LAST PACKET
	NXMJMP	2$			;SKIP OVER NON-EXISTANT MEMORY
	MOV	R2,R1			;COPY NEXT ADDRESS TO R1
	SUB	#PKTWDS*2,R1		;FORM ADDRESS OF THIS PACKET AS THE LAST SUCESSFUL
	MOV	#PKTWDS-1,R2
4$:	CLR	(R3)+			;CLEAR A WORD
	SOB	R2,4$			;CONTINUE IF MORE WORDS TO CLEAR
	SOB	SD,3$			;CONTINUE IF MORE PACKETS TO MAKE
	MOV	R3,PKTBND		;SAVE FOR RANGE CHECKS
	SUB	#PKTWDS*2,R3		;POINT TO BEGINING OF PACKET
	MOV	R3,PKFLST		;INITIALIZE FREE LIST POINTER
	MOV	R3,PKTEND		;SAVE END OF PACKET SPACE FOR DEBUG
	RETURN				;AND RETURN
	.PAGE
	.SBTTL	MAKPKT - GET PACKET FROM THE FREE LIST

;This subroutine is called with an "EMT" instruction which uses a trap vector
;  at location 30.  This is done to provide a simple way to disable interrupts
;  when calling this subroutine.  It may be called from main program level or
;  from any interrupt level.  The macro "MAKPKT" is provided which generates
;  an "IOT" instruction.

;Packets are fixed length buffer "chunks" which are used for a varity of uses
;  in the node.  Unallocated packets are linked into a "free list" with the
;  first word of each packet containing the address of the next packet in
;  the list.  The word PKFLST points to the first packet in the list.  The
;  word PKFCNT contains a count of the number of packets in the list.  Normally
;  the last packet in the free list is not available; it is reserved for use
;  by the MAKKIL routine to ensure that a Kill packet can always be obtained
;  when necessary.  MAKKIL will increase PKFCNT by 1 before calling MAKPAC to
;  make the last packet available!

;	MAKPKT	LIMIT
;	C:SET = None available
;	C:CLR = Normal
;	C(R1) = Address of packet (first word has been cleared)

	VECTOR	30,MAKPAC,7

MAKPAC:: CMP	PKFCNT,#.PLOPT#+1	;ARE WE LOW ON PACKETS?
	BGT	6$			;NO-DON'T BOTHER TO CHECK LIMIT!
	MOV	(SP),R1			;YES-GET LIMIT
	MOVB	-2(R1),R1
	CMP	PKFCNT,R1
	BLE	50$			;NOT ENOUGH-GO FAIL!
6$:	MOV	PKFLST,R1		;Get pointer to first packet on free
					;  list
	BEQ	50$			;If none there
.IF NE ..BUG
	CMP	R1,#PKTBGN#		;Can this be a packet?
	BLO	10$			;No
	BIT	#77,R1			;Maybe-really?
	BNE	10$			;No
	CMP	R1,PKTEND		;Is it low enough?
	BLOS	20$			;Yes
10$:	RSTOP	BPA			;[Bad Packet Address]

20$:	MOV	(SP),70(R1)		;TAG PACKET WITH ADDRESS OF CREATOR
	MOV	4(SP),66(R1)		;SAVE ADDRESS OF CALLER OF CREATOR
	MOV	SD,64(R1)		;SAVE SD AS CLUE
	MOV	R2,62(R1)		;SAVE R2 AS CLUE
	MOV	R0,60(R1)		;SAVE R0 AS CLUE
	CMP	R1,PKTLST		;IS THIS PACKET THE START OF THE TEST LIST
	BNE	22$			;NO
	MOV	(R1),PKTLST		;YES, POINT TO NEXT PACKET
22$:
.ENDC

	MOV	(R1),PKFLST		;Remove this packet from the free list
	BEQ	40$			;IF LIST IS EMPTY NOW
	DEC	PKFCNT			;NOT EMPTY-REDUCE COUNT
;	BGT	30$			;MAKE SURE COUNT IS OK
	BLE	46$			;COUNT SHOULDN'T HIT ZERO YET

30$:	CMP	PKFCNT,PKFCMN		;IS THIS A NEW MINIMUM?
	BGE	32$			;NO
	MOV	PKFCNT,PKFCMN		;YES
32$:	CLR	(R1)			;Clear the link word
	BIC	#1,2(SP)		;Clear C
	RTI				;And return

40$:	MOV	#PKTLST,PKTLST		;POINT LAST PACKET POINTER AT BEGINING
	DEC	PKFCNT			;LIST IS EMPTY-REDUCE COUNT
	BEQ	30$			;MUST BE ZERO NOW!
46$:	RSTOP	BFC			;[BAD FREE COUNT]

;HERE IF NO PACKETS AVAILABLE NOW

50$:	BIS	#1,2(SP)		;Set C
.IF NE ..BUG
	MOV	#177400,R1		;Set packet address to NXM address
.IFF
	CLR	R1			;Make sure R1 is zero
.ENDC
	RTI				;And return
	.PAGE
	.SBTTL	FREPKT - PLACE PACKET ON THE FREE LIST

;THIS SUBROUTINE IS CALLED WITH AN "IOT" INSTRUCTION WHICH USES A TRAP VECTOR
;  AT LOCATION 20.  THIS IS DONE TO PROVIDE A SIMPLE WAY TO DISABLE INTERRUPTS
;  WHEN CALLING THIS SUBROUTINE.  IT MAY BE CALLED FROM MAIN PROGRAM LEVEL OR
;  FROM ANY INTERRUPT LEVEL.  THE MACRO "FREPKT" IS PROVIDED WHICH GENERATES
;  AN "EMT" INSTRUCTION.
;	C(R1) = ADDRESS OF PACKET
;	PACKET MUST BE ADDRESSABLE
;	FREPKT
;  ALL REGISTERS ARE PRESERVED

	VECTOR	20,FREPAC,7

FREPAC::
.IF NE ..BUG
	PUSH	R0			;SAVE A REGISTER
	PUSH	R2			;AND ANOTHER
	PUSH	R3
	PUSH	R4
	PUSH	R5
	BIT	#77,R1			;MAYBE-IS IT REALLY?
	BNE	10$			;NO!!!
	MOV	#PKTBGN#,R5		;SET LOWER LIMIT IN REGISTER
	CMP	R1,R5			;CAN THIS BE A PACKET?
	BLO	10$			;NO, TOO LOW IN MEMORY
	MOV	PKTEND,R4		;PUT HIGH LIMIT IN REGISTER
	CMP	R1,R4			;IS IT TOO HIGH IN MEMORY?
	BLOS	20$			;NO-WE ARE HAPPY WITH IT
10$:	RSTOP	BPA			;[BAD PACKET ADDRESS]

20$:	MOV	PKTLST,R0		;GET FREE LIST POINTER ADDRESS
	MOV	#7.,R2			;SET UP LIMIT COUNTER

25$:	MOV	(R0),R3			;GET NEXT FREE PACKET POINTER
	BEQ	30$			;STOP CHECKING AT END OF LIST
	CMP	R3,R1			;PACKET TO FREE ALREADY ON LIST?
	BEQ	10$			;YES - ERROR
	CMP	R3,R5			;CHECK THE FREE LIST FOR CORRUPTION
	BLO	27$			;HANDLE ERROR
	CMP	R3,R4			;IS IT LOW ENOUGH IN MEMORY?
	BHI	27$			;NO, TREAT AS FATAL ERROR
	BIT	#77,R3			;IS IT ON A CORRECT BOUNDARY?
	BEQ	29$			;YES
27$:	RSTOP	BFL

29$:	MOV	R3,R0			;UPDATE LIST POINTER
	SOB	R2,25$			;DO THIS TEN TIMES
	MOV	@PKTLST,PKTLST		;UPDATE POINTER
30$:	MOV	R1,(R0)			;LINK PACKET INTO LIST
	CLR	(R1)			;CLEAR LINK
	POP	R5			;RESTORE SAVED REGISTERS
	POP	R4
	POP	R3
	POP	R2
	POP	R0
	MOV	(SP),64(R1)		;save trace data
.IFF
	MOV	PKFLST,(R1)		;LINK THIS PACKET ONTO THE FREE LIST
	MOV	R1,PKFLST		;THIS PACKET BECOMES NEW FIRST ON FREE
					;  LIST
.ENDC
	INC	PKFCNT			;INCREASE COUNT OF FREE PACKETS
	CLR	R1			;Make it clear so it can't be used
	RTI				;RETURN
	.PAGE
	.SBTTL	GETBYT - GET CHARACTER FROM DATA PACKET

;	CALL	GETBYT
;	C:SET,Z:SET = NOTHING AVAILABLE
;	C:SET,Z:CLR = CONTROL PACKET CODE RETURNED
;	C:CLR,Z:CLR = NORMAL, DATA CHARACTER RETURN
;	C(R0) = VALUE RETURNED
;	C(R1) = ADDRESS OF PACKET

;NOTE:  THE PROGRAM CALLING GETBYT CAN PROCEED IN TWO WAYS WHEN C IS SET
;	INDICATING A CONTROL PACKET.  THE SUBROUTINE GETCTL MAY BE CALLED
;	REPEATEDLY TO FETCH BYTES FROM THE PACKET ONE AT A TIME.  GETCTL
;	WILL RETURN WITH C SET WHEN THE PACKET IS EXAUSTED.  AT THIS TIME
;	THE PACKET HAS BEEN GIVEN UP.  IF ALL OF THE BYTES ARE NOT FETCHED
;	BY CALLING GETCTL, THE SUBROUTINE FINCTL MUST BE CALLED TO GIVE UP
;	THE PACKET.  IT MAY BE CALLED IN EITHER CASE, ACUTALLY, WHICH IS A
;	GOOD IDEA.  WHEN THIS SEQUENCE IS USED, THE VALUE RETURNED IN R1
;	IS NOT USED AND R1 MAY BE DESTROYED.  THE OTHER OPTION, WHICH IS MORE
;	EFFICIENT IN MANY CASES, IS FOR THE CALLER TO DIRECTLY USE THE VALUE
;	IN R1 TO ACCESS THE PACKET.  IN THIS CASE THE OFFSETS PKCNT AND PKDATA
;	SHOULD BE USED WHEN INDEXING INTO THE PACKET.  WHEN FINISHED, JNKPKT
;	SHOULD BE CALLED TO GIVE UP THE PACKET, OR IF DESIRED, THE PACKET MAY
;	BE SENT BACK TO THE SRC BY CALLING SNDPKT.  IN ANY CASE, THE VALUE OF
;	R1 MUST BE PRESERVED UNTIL EITHER JNKPKT OR SNDPKT IS CALLED.  THESE
;	TWO METHODS SHOULD NOT BE MIXED WHEN ACCESSING A GIVEN PACKET!

GETBYT::CALL	GETPKT			;Get current packet
	BEQ	GETBY9			;If no packets now
	MOVB	PKTYPE(R1),R0		;Get packet type
	BNE	10$			;If not data packet
	MOVB	PKPNT(R1),R2		;Data packet-get character offset
	BGT	2$			;Go on if not first character
	INC	R2			;Bump pointer
	MOVB	R2,PKPNT(R1)		;And store it back
2$:	ADD	R1,R2			;Calculate address of character
;	MOVB	PKDATA-1(R2),R0		;Get character
	INCB	PKPNT(R1)		;Increment character pointer
	DECB	PKCNT(R1)		;Decrement character count in packet
	BGT	4$			;Finished if still something there
	BLT	6$			;If packet was empty to begin with!
	PUSHB	PKDATA-1(R2)		;Packet now empty-save data byte
	CALL	JNKCPK			;Give up the packet
	POPB	R0			;Restore data
	BR	5$
4$:	MOVB	PKDATA-1(R2),R0		;Get character
5$:	CLCZ				;Give normal return
	RETURN

;Here if packet was empty when this subroutine was called

6$:	CALL	JNKCPK			;Give up the packet
	BR	GETBYT			;And try again

;Here if not data packet

10$:	SEC				;Indicate control packet
	RETURN				;And return

;Here if no packets now

GETBY9:	SECZ				;SET BOTH C AND Z
	RETURN				;RETURN
	.PAGE
	.SBTTL	GETCTL - GET BYTE FROM CONTROL PACKET

;	CALL	GETCTL
;	C:SET = NOTHING AVAILABLE
;	C(R0) = DATA

GETCTL::CALL	GETPKT			;Get address of packet
	DECB	PKCNT(R1)		;Decrement byte count
	BLT	GETBY9			;If no more there
2$:	MOVB	PKPNT(R1),R2		;Get character pointer
	BNE	4$			;Go on if initialized
	INCB	PKPNT(R1)		;Skip packet type!
	BR	2$

4$:	INCB	PKPNT(R1)		;Bump pointer
	ADD	R1,R2			;Calculate address of data
	MOVB	PKDATA-1(R2),R0		;Get data byte
	CLC				;Clear C
RTN002:	RETURN				;And return
	.PAGE
	.SBTTL	PUTBYT - PLACE DATA CHARACTER INTO PACKET

;	C(R0) = CHARACTER
;	CALL	PUTBYT
;	  error return, character not stored, R0 unchanged
;	normal return, character stored, R0 not preserved
;THIS SUBROUTINE IS USED BY ALL CHARACTER AT A TIME DEVICES EXCEPT THE TERMINAL
;  SERVICE.  THE TERMINAL USES THE SUBROUTINE PUTCHR WHICH ALSO HANDLES
;  LINE MODE BUFFERING.

PUTBYT::MOV	SDPKSP#(SD),R1		;GET POINTER TO CURRENT PACKET
	BNE	5$			;GO ON IF HAVE ONE
	CMPB	SDPMAX#(SD),SDPCNT#(SD)	;TOO MANY PACKETS NOW?
	BGT	4$			;NO-GO ON
	BIS	#$S1STP,SDSTS1#(SD)	;YES-INDICATE WE HAVE BEEN STOPPED
	RETURN				;RETURN

;HERE TO GET ANOTHER PACKET

4$: MAKPKT	.PLSTP#			;GET A NEW PACKET
	BCS	RTN002			;IF PACKET SPACE FULL (BIG TROUBLE!)
	INCB	SDPCNT#(SD)		;INCREASE PACKET COUNT
	MOV	R1,SDPKSP#(SD)		;STORE POINTER TO PACKET
	CLR	PKCNT(R1)		;CLEAR COUNT AND PACKET TYPE (PKTYPE =
					;  PKCNT + 1)
	CLRB	PKPNT(R1)		;CLEAR POINTER
	MOV	R1,R2			;COPY ADDRESS
	BR	6$			;CONTINUE

;HERE WITH EXISTING PACKET

5$:	MOVB	PKPNT(R1),R2		;GET CHARACTER POINTER
	ADD	R1,R2			;CALCULATE ADDRESS OF NEXT CHARACTER
6$:	MOVB	R0,PKDATA(R2)		;STORE CHARACTER
	INCB	PKCNT(R1)		;INCREMENT COUNT
	INCB	PKPNT(R1)		;INCREMENT POINTER
	ADD	#2,(SP)			;Give good return
	CMPB	#PKCMAX,PKPNT(R1)	;IS THIS PACKET FULL?
	BHI	RTN002			;NO-JUST GIVE NORMAL RETURN
	CJMP	SNDDP2			;Yes-send the packet and return
	.PAGE
	.SBTTL	JNKCPK - Give up current packet

;	CALL	JNKCPX			;Entry if address not set up

JNKCPX::MOV	SDPKCP#(SD),R1		;Get address
	BEQ	RTN002			;Forget it if no packet
					;Fall into JNKCPK

;	C(R1) = Address of packet
;	CALL	JNKCPK

JNKCPK::CMP	SDPKCP#(SD),R1		;Is this the current packet?
	BNE	2$			;No-go on
	CLR	SDPKCP#(SD)		;Yes-but not any more!
2$:	FREPKT				;Give up the packet
	BR	DECPCN			;Continue

	.SBTTL	JNKPKT - Give up packet

;	CALL	JNKPKX			;Entry if address not set up

JNKPKX::MOV	SDPKDH#(SD),R1		;Get address
	BEQ	RTN002			;Forget it if no packet
					;Fall into JNKPKT

;	C(R1) = Address of packet
;	CALL	JNKPKT

JNKPKT::CMP	SDPKDH#(SD),R1		;Is this packet on the DST list?
	BNE	2$			;No-go on
	CALL	REMOVE			;Yes-remove it from the DST list
2$:	FREPKT				;Give up the packet
					;Fall into DECPCN

	.SBTTL	DECPCN - Decrement packet count (SDPCNT) for linked SDB

;Subroutine to decrement packet count (SDPCNT) for linked SDB
;	C(SD) = address of calling SDB
;	CALL	DECPCN

DECPCN::TSTB	SDXCNT#(SD)		;Any excess packets for this socket?
	BEQ	4$			;No-go on
	DECB	SDXCNT#(SD)		;Yes-reduce it
	RETURN				;And return

4$:	MOV	(SD),R2			;Get linked socket
	BNE	DECPC4			;Go on if someone is linked
	RETURN				;Otherwise forget it!

	.SBTTL	DECOWN - Decrement packet count (SDPCNT) for calling SDB

;Subroutine to decrement packet count (SDPCNT) for calling SDB
;	C(SD) = address of SDB
;	CALL	DECOWN

DECOWN::MOV	(SD),R2			;Get linked SDB
	BEQ	4$			;Go on if none linked
	TSTB	SDXCNT#(R2)		;Is his extra packet count up?
	BEQ	4$			;No
	DECB	SDXCNT#(R2)		;Yes-reduce it
	RETURN				;Thats all

4$:	mov	SD,R2			;Point to the source SDB
DECPC4:	DECB	SDPCNT#(R2)		;Reduce packet count
	BGE	WAKCHK			;OK?
	CLRB	SDPCNT#(R2)		;No-fix it up!
					;Fall into WAKCHK

	.SBTTL	WAKCHK - Wake up linked socket if necessary

;	C(R2) = Address of SDB of linked socket
;	C(SD) = address of SDB for this socket
;	CALL	WAKCHK

WAKCHK::TBBN	$D0FLG,@SDDDB#(R2),2$;Is it a link socket which uses flags?
					;Only link-B uses flag protocol.
	TBBE	$S1STP,SDSTS1#(R2),RTN002;No-has the device been stopped?
	PUSH	R3		;--KSB1
	MOVB	SDPMAX#(SD),R3		;Yes-get limit
	ASR	R3			;Divided by 2
	CMPB	R3,SDPCNT#(R2)		;Can he resume now?
;	BLT	RTN002			;No--KSB1
	BLT	WAKCH4		;--KSB1	;No
	POP	R3		;--KSB1
	TST	SDPCNT#(R2)		;Maybe - any packets outstanding?
	BEQ	10$			;No - always continue output
	CMP	#.PLOPT#+10.,PKFCNT	;Are we low on packets?
	BGE	RTN002			;Yes - wait until last packet to restart
10$:	BIC	#$S1STP,SDSTS1#(R2)	;Yes-indicate not stopped now
2$:
WAKCH2::	;--USC1, called only from TRMF-PKTFUN-.FNXMK X25 marker.
		;Link-E does not use flag pk to resume flow control any more, 
		; nor does $S1STP be set. Instead an X25 marker function pk
		; is appended to every X25-Data-Packet(XPK), which will be
		; processed by TRMF and always starts LKEPKT-LERSUM.
	BISB	#$RQRSM,SDREQB#(R2)	;Set request bit
	INCB	SDRSMC#(R2)		;Increase resume count
	CJMP	REQXR2#			;Put SDB into request list and return

WAKCH4:	POP	R3		;--KSB1, 11/1/84 SAVE R3 SO ALL ROUTINE IN
	RETURN			; PKT1 WILL DESTROY R0,R1,R2 ONLY
	.PAGE
;SUBROUTINE TO REMOVE PACKET FROM THE DST LIST
;	C(R1) = ADDRESS OF PACKET
;	C(SD) = ADDRESS OF SDB
;	CALL	REMOVE

REMOVE::MOV	(R1),SDPKDH#(SD)	;UPDATE HEAD POINTER
	BNE	6$			;GO ON IF NOT LAST IN LIST
	CMP	SDPKDT#(SD),R1		;LAST-IS THE TAIL POINTER RIGHT?
	BEQ	4$			;YES-GO ON
	CMPB	#.SSCTP,SDSTS1#(SD)	;NO-IS THIS SDB IN THE CONNECT TO
					;  PENDING STATE?
	BEQ	6$			;YES-THIS IS OK SINCE THE TAIL POINTER
					;  IS BEING USED TO POINT TO THE SAVED
					;  CONNECT PACKET!
	CMPB	#.SSRTP,SDSTS1#(SD)	;No-is this SDB in the reconnect to
					;  pending state?
	BEQ	6$			;Yes-this is like .SSCTP
	CMPB	#.SSRFW,SDSTS1#(SD)	;NO-IS THIS SDB IN THE RECONNECT FROM
					;  WAITING STATE?
	BEQ	6$			;YES-THIS IS OK SINCE IN THIS CASE THE
					;  SEND LIST HAS BEEN "BLOCKED"
	RSTOP	BTP			;[BAD TAIL POINTER]

4$:	CLR	SDPKDT#(SD)		;LIST EMPTY-CLEAR TAIL POINTER
6$:	RETURN				;RETURN
	.PAGE
	.SBTTL	SNDDPK - SEND DATA PACKET

;	CALL	SNDDPK

SNDDPK::MOV	SDPKSP#(SD),R1		;GET POINTER TO PACKET
	BEQ	RTN004			;FORGET IT IF NONE THERE
SNDDP2:	CLR	SDPKSP#(SD)		;CLEAR POINTER
	JMP	SNDPKT#			;GO SEND PACKET AND RETURN
	.PAGE
	.SBTTL	CTLPKT - BEGIN CONTROL PACKET

;	C(R0) = PACKET TYPE
;	CALL	CTLPKT
;	C:SET       = FAILURE, CHARACTER DISCARDED
;	C:CLR,Z:SET = WARNING, CHARACTER ACCEPTED
;	C:CLR,Z:CLR = NORMAL, CHARACTER ACCEPTED
;	C(R1) = ADDRESS OF PACKET

;NOTE:  CONTROL PACKETS MAY BE GENERATED IN TWO WAYS.  IN EITHER CASE CTLPKT
;	IS CALLED FIRST TO SET UP THE PACKET.  IN THE FIRST METHOD CTLSTR IS
;	THEN CALLED FOR EACH CHARACTER TO BE INSERTED IN THE PACKET.  WHEN
;	FINISHED SNDPKT IS CALLED TO SEND THE PACKET.  OPTIONALLY, CTLSTE
;	MAY BE CALLED TO STORE THE LAST CHARACTER, WHICH ALSO SENDS THE PACKET.
;	THE OTHER METHOD IS TO USE THE POINTER RETURNED IN R1 DIRECTLY TO STORE
;	DATA INTO THE PACKET.  IN THIS CASE THE CALLER MUST SET PKCNT HIMSELF
;	(IT IS CLEARED BY CTLPKT).  THE PACKET IS SEND BY CALLING SNDPKT.
;	IN EITHER CASE, THE VALUE OF R1 MUST BE RESPECTED UNTIL EITHER SNDPKT
;	OR CTLSTE IS CALLED.

CTLPKT::CMPB	SDPMAX#(SD),SDPCNT#(SD)	;CAN WE HAVE ANY MORE PACKETS?
	BGT	CTLPKX			;Yes-go on
	SEC				;No-fail
	RETURN

CTLPKX::MAKPKT	.PLTRM#			;YES-GET A PACKET
	BCS	RTN004			;IF NONE AVAILABLE
	CLRB	PKCNT(R1)		;CLEAR COUNT
	MOVB	R0,PKTYPE(R1)		;STORE PACKET TYPE
	INCB	SDPCNT#(SD)		;BUMP PACKET COUNT
	RETURN				;Note:  Z will always be clear here!

	.SBTTL	CTLSTR - PLACE BYTE INTO CONTROL PACKET

;	C(R0) = BYTE TO STORE
;	C(R1) = ADDRESS OF PACKET
;	CALL	CTLSTR

CTLSTR::MOVB	PKCNT(R1),R2		;GET CHARACTER COUNT
	INCB	PKCNT(R1)		;BUMP CHARACTER COUNT
	ADD	R1,R2			;CALCULATE ADDRESS FOR CHARACTER
	MOVB	R0,PKDATA(R2)		;STORE CHARACTER
RTNCC4:	CLC
RTN004:	RETURN				;FINISHED

	.SBTTL	CTLSTE - STORE BYTE AND END CONTROL PACKET

;	C(R0) = BYTE TO STORE
;	C(R1) = ADDRESS OF PACKET
;	CALL	CTLSTE

CTLSTE::CALL	CTLSTR			;STORE CHARACTER
	JMP	SNDPKT#			;AND GO SEND THE PACKET
	.PAGE
	.SBTTL	GETPKT - GET NEXT PACKET FROM DST LIST

;Subroutine to get next packet - if there is a current packet, it is returned
;  again, if not, the first packet on the DST list is make the curent packet
;  and returned
;	CALL	GETPKT
;	Z:clr = Normal
;	Z:set = Nothing in list
;	C(R1) = Address of packet

GETPKT::MOV	SDPKCP#(SD),R1		;Get current output packet
	BNE	10$			;Finished if have one
	MOV	SDPKDH#(SD),R1		;Get packet from DST list
	BEQ	10$			;If none
	CALL	REMOVE			;Remove from DST list
	MOV	R1,SDPKCP#(SD)		;Store as current packet
10$:	RETURN				;Thats all
	.PAGE
	.SBTTL	GIVPKT - RETURN PACKET WITH CHECK FOR HOLDING

;	C(R1) = ADDRESS OF PACKET
;	C(R4) = ADDRESS OF DDB FOR DEVICE GIVING UP THE PACKET
;	CALL	GIVPKT

GIVPKT::FREPKT				;DO THIS FOR REAL LATER!!
RTN008:	RETURN
	.PAGE
	.SBTTL	PKTAGN - PUT A PACKET BACK

;	C(R1) = ADDRESS OF PACKET
;	CALL	PKTAGN

PKTAGN::MOV	(SD),R2			;GET LINKED SDB
	BEQ	2$			;IF NONE
	INCB	SDPCNT#(R2)		;BUMP HIS COUNT
2$:	MOV	SDPKDH#(SD),R2		;GET FIRST PACKET ON DST LIST
	MOV	R1,SDPKDH#(SD)		;PUT OUR PACKET AT THE HEAD
	MOV	R2,(R1)
	BNE	4$			;IF NOT ONLY PACKET IN LIST
	MOV	R1,SDPKDT#(SD)		;ONLY ONE IN LIST-UPDATE TAIL POINTER
4$:	RETURN				;THATS ALL
	.PAGE
	.SBTTL	ACCEPT - ACCEPT CONNECTION

;	C(R1) = ADDRESS OF CONNECT PACKET
;	C(R2) = TRM PROFILE * 400 + FLAG BITS (IF PROFILE = DON'T
;		  CHANGE THE CURRENT PROFILE PARAMETERS)
;	CALL	ACCEPT
;	C(R0) = Priviledge level value from Connect packet

ACCEPT::MOV	#.PTACK*400+3,PKCNT(R1)	;CHANGE THIS TO AN ACK PACKET
	MOVB	SDSOC#(SD),PKDATA(R1)	;STORE SOCKET NUMBER AS DATA
	MOVB	R2,PKDATA+1(R1)		;STORE FLAG BITS
	SWAB	R2			;AND STORE TERMINAL PROFILE
	INC	R2
	MOVB	R2,PKDATA+2(R1)
	PUSHB	PKDATA+24(R1)		;Save priviledge level
	CALL	PKTRTX			;SEND PACKET BACK TO SRC
	POPB	R0			;Get priviledge level
	CLC				;INDICATE GOOD RETURN
	RETURN				;FINISHED

	.SBTTL	REFUSE - REFUSE CONNECTION

;	C(R0) = CONNECTION FAILURE CODE (.ERXXX)
;	C(R1) = ADDRESS OF CONNECT PACKET
;	CALL	REFUSE

REFUSE::CALL	SETNAK			;SETUP A NAK PACKET
	CALL	PKTRTX			;SEND IT
RTNCS8:	SEC
	RETURN
	.PAGE
	.SBTTL	MAKKIL - MAKE A KILL PACKET

;Subroutine to generate a Kill packet - this subroutine will use the reserve
;  packet on the free list if necessary to garrentee that a Kill packet can
;  always be obtained!  The routine calling MAKKIL !must! call SNDPKT to send
;  the Kill packet before returning to the main program loop.  This subroutine
;  !must not! be called from interrupt level!!!!
;	C(R0) = ERROR CODE
;	CALL	MAKKIL
;	C(R1) = Address of Kill packet

MAKKIL::MAKPKT	.PLKIL#			;Get a packet
	BCC	SETKIL			;We should always get one here!!
	RSTOP	NPA			;[No Packet Available]

	.SBTTL	SETKIL - SET UP A KILL PACKET

;	C(R0) = ERROR CODE
;	C(R1) = ADDRESS OF PACKET
;	CALL	SETKIL
;	C(R1) = ADDRESS OF KILL PACKET

SETKIL::MOV	#.PTKIL*400,PKCNT(R1)	;STORE TYPE, CLEAR COUNT BYTE
	BR	SETEPK			;CONTINUE

	.SBTTL	SETDIS - SETUP A DISCONNECT PACKET

;SUBROUTINE TO SETUP A DISCONNECT PACKET
;	C(R0) = REASON CODE
;	C(R1) = ADDRESS OF PACKET
;	CALL	SETDIS

SETDIS::MOV	#.PTDIS*400,PKCNT(R1)	;MAKE IT A DISCONNECT PACKET
	BR	SETEPK			;CONTINUE

	.SBTTL	SETNAK - SETUP A NAK PACKET

;	C(R0) = CONNECTION FAILURE CODE (.ERXXX)
;	C(R1) = ADDRESS OF PACKET
;	CALL	SETNAK

SETNAK::MOV	#.PTNAK*400,PKCNT(R1)	;MAKE A NAK PACKET FROM THE CONNECT
SETEPK::MOVB	R0,PKDATA(R1)		;STORE DATA BYTE
	PUSH	R2			;SAVE REGISTERS
	PUSH	R3
	MOV	#THSNOD#,R3		;GET ADDRESS OF THE NAME OF THIS NODE
	MOV	R1,R2			;MAKE POINTER TO PACKET
	ADD	#PKDATA+1,R2
2$:	INCB	PKCNT(R1)		;BUMP BYTE COUNT
	MOVB	(R3)+,(R2)+		;COPY NAME CHARACTER
	BNE	2$			;CONTINUE IF MORE
	SWAB	R0			;PUT EXTENDED DIAGNOSTIC INFO IN RIGHT HALF
	MOVB	R0,(R2)+		;SAVE EXTENDED DIAG INFO
	POP	R3			;RESTORE REGISTERS
	POP	R2
RTN012:	RETURN				;FINISHED
	.PAGE
	.SBTTL	CPKRTN - Send current packet back to its source

;	C(R1) = Address of packet which may be the current packet
;	CALL	CPKRTN

PKTRTX::TST	SDPKCP#(SD)
	BEQ	PKTRTN
CPKRTN::CMP	SDPKCP#(SD),R1		;Is this the current packet?
	BNE	PKTRT4			;No
	CLR	SDPKCP#(SD)		;Yes-but not any more!
	BR	PKTRT2			;Continue

	.SBTTL	PKTRTN - Send packet back to its source

;	C(R1) = Address of packet which may be at head of DST list
;	CALL	PKTRTN

PKTRTN::CMP	SDPKDH#(SD),R1		;Is the packet still on the DST list?
	BNE	PKTRT4			;No
	CALL	REMOVE			;Yes-remove packet from the DST list
PKTRT2:	CALL	DECPCN			;Reduce his packet count
PKTRT4:	INCB	SDPCNT#(SD)		;Increment our packet count
	CJMP	SNDPKT#			;Send it and return
	.PAGE
	.SBTTL	OUTSUP - SUPPRESS OUTPUT

OUTSUP::MOV	#.FNOPS,R0		;GET FUNCTION
	BR	CLRIN2			;CONTINUE

	.SBTTL	CLRINP - CLEAR INPUT BUFFER

CLRINP::MOV	#.FNRQC,R0		;GET FUNCTION
CLRIN2:	MAKPKT	.PLSTP#			;GET A PACKET
	BCS	RTN012			;FORGET IT CAN'T GET ONE
	BIS	#$S1JNK,SDSTS1#(SD)	;GOT ONE-INDICATE SHOULD JUNK DATA PKTS
	MOV	#.PTINT*400+1,PKCNT(R1)	;MAKE THIS A 1 CHARACTER INTERRUPT PKT
	MOVB	R0,PKDATA(R1)		;STORE FUNCTION
	CJMP	SNDPKT#			;SEND THE PACKET AND RETURN
	.PAGE
	.SBTTL	DATA STORAGE

;PURE DATA FOR PACKET SPACE (SET UP AT ONCE-ONLY TIME)

	PSECT	PDATA,RW,D,LCL,REL,CON

NUMPKT::.WORD	0		;NUMBER OF PACKETS IN PACKET SPACE

;IMPURE DATA FOR PACKET SPACE

	PSECT	IMPURE,RW,D,LCL,REL,CON

PKFLST::.WORD	0		;FREE LIST HEAD POINTER
PKFCNT::.WORD	0		;COUNT OF NUMBER OF PACKETS ON FREE LIST
PKFCMN::.WORD	0		;MINIMUM VALUE SEEN FOR PKFCNT
PKFHLF::.WORD	0		;HALF THE MAXIMUM AVAILABLE PACKETS
PKTBND::.WORD	0		;ADDRESS AFTER LAST PACKET
PKTLST:	.WORD	0		;END OF LIST OF PACKETS
PKTEND:	.WORD	0		;LAST PACKET ADDRESS IN MEMORY
	.END
   @ 
h7