Module Justify = begin
!Left margin,,right margin added by Carl Baltrunas.

!----------------------------------------------------------------
!
! This module contains code to justify a paragraph.
!
! Routines of interest:
!
!	findbreak(i)	finds nearest paragraph break at or before i
!
!	chopline(lb,cp,lm)
!			chops a line by inserting a carriage return.
!			lb is a pointer to the last break seen so far;
!			cp is the current position on the line.
!			lm is the left-justification margin
!
!	just(lft,rgt)	justifies text starting at the current cursor
!			position between columns lft and rgt.
!
!	metaj		the justify command
!
!	metalb		up paragraph:  meta-[
!
!	metarb		down paragrpah:  meta-]
!

external hbot,hend,lowend,ctrln2,ctrlp2,ctrla,ctrle;
external moveforward,moveback,lowptr,hptr;
external delbackward,delforward,updatecursor,insertchar;
external scrmod,muline,repcount;
external toprompt,getIndent,setIndent,bsback,indent,iudent,crwnin;
external eolbreak,fmtbreak,whtbreak;
external pbreak,blankline,findbreak,apbreak;

! ----------------------------------------------------------------------
! chopline is called when JUST notices that the word it is currently
! building exceeds the right margin.  the first arg to chopline
! is the location of the last word break seen.  chopline will insert a
! carriage return at the appropriate place, and trim trailing blanks
! from the preceding line.  the left-margin is preserved assuming the
! value of ldent.  it returns the new value of linpos.
! ----------------------------------------------------------------------

routine chopline (lastbreak, linpos, ldent) = begin
    if .lastbreak eql -1 then return .linpos;		! cant't break yet
    moveback(.lowend - .lastbreak);			! move after break
    while whtBreak(scann(lowptr))			! delete whitespace
     do delbackward();					!  preceeding break
    insertchar("?M");					! insert <cr>
    setIndent(.ldent);					! insert any margin
    return if .ldent geq 0 then .ldent+1 else 1		! return margin+1
end;


! ----------------------------------------------------------------------
! Return the type of the character.
! Types are:
!	0 - break chars (other)
!	1 - alphabetic-numeric
!	2 - sentence breaks
!	3 - close-parens breaks
!	4 - a "real" space
!	5 - convert to space
!	6 - special backspace
!	7 - not possible - unused

routine Justtype( ch ) = begin
    Bind typetab = plit(		! (table is reversed 35-0 order)
	#005600000000,	#000000000050,	! ^K.......nul	 ^W........^L
	#032400000000,	#020000303000,	! #"! ......^X	 /.-,+*)('&%$
	#221111111111,	#111111102300,	! ;:9876543210	 GFEDCBA@?>=<
	#111111111111,	#003001111111,	! SRQPONMLKJIH	 _^]\[ZYXWVUT
	#111111111113,	#111111111111,	! kjihgfedcba`	 wvutsrqponml
	#777700300111  );		! ..del~}|{zyx
    .Typetab[.Ch/12]<(.Ch mod 12)*3, 3>
end;


! ----------------------------------------------------------------------
! JUST is called with the cursor pointing to the start
! of a paragraph.  JUST will fill and justify text from
! that point up to the next paragraph break.  the justification
! width is passed as an argument.
!
! method of justification:
!	tabs and carriage-returns are converted to single spaces
!	multiple blanks are compressed to one
!	sentence breaks followed by zero or more )>]'"}
!		will be followed by exactly two blanks
!	blank is the only word separator
!	final trailing whitespace will be deleted

global routine just (linlft,linrgt) = begin
    register char;		! a temp to save getchxr calls.
    own blankctr;		! how many blanks can slip by
    own linpos;			! where we are on the line
    own lastbreak;		! where to break on overflow
    own lft,rgt;		! hack since can't access in gathertoken

    routine gathertoken( arg ) = begin			! common split code
	moveforward(1);					! pass the character
	linpos _ updatecursor(.char,.linpos);		! update position
	if .linpos gtr .rgt				! if too large
	 then begin					!  then break it
	    linpos_chopline(.lastbreak,.linpos,.lft);	!  returning position
	    lastbreak _ -1				!  set break flag
	 end;
	 if .arg gtr 0					! if nonzero, then
	  then blankctr _ .arg;				! set blank count.
    end;


    blankctr _ 0;			! initially zap spaces.
    lastbreak _ -1;			! can't break until after first item
    lft _ .linlft;			! hack for gathertoken
    rgt _ .linrgt;			! hack for gathertoken

    while blankline(.lowend)		! skip over any initial blank lines
     do ctrln2();
    linpos _ GetIndent( 1 );		! get current indenture
    if .crwnin and .linpos lss .linlft	! if want crown and smaller
     then linpos_ .linpos+.linlft;	!  then add otherwise use current
    SetIndent( .linpos );		! set crown of paragraph

    until pbreak(.lowend) and		! justify through next par-break
	not (.lowend eql 1 and		!   but ignore the beginning of
	     .hend-.hbot neq 0)		!   the buffer if it's not empty.
     do begin				! main justify loop
	char _ scann(hptr);		! look at a buffer character
	case justtype( .char ) of set	! perform necessary operations

	    gathertoken( 1 );		! [0] control - punctuation
	    gathertoken( 1 );		! [1] alpha numerics
	    gathertoken( 2 );		! [2] terminal punctuation
	    gathertoken( 0 );		! [3] enclosing punctuation

	    begin			! [4] space logic
		if .blankctr eql 0
		 then delforward()		! delete multiple spaces
		 else while .blankctr gtr 0	!   or allow as many
		  do begin			!   as necessary
		    blankctr _ .blankctr - 1;
		    if " " eql scann(hptr)
		     then moveforward(1)	! skipping existing ones
		     else insertchar(" ");	! or creating needed ones.
		    linpos _ .linpos + 1;	! count characters on line
		    lastbreak _ .lowend		! remember as last break
		 end
	    end;

	    replacen(hptr," ");		! [5] convert character to space
	    
	    if .bsback			! [6] special backspace logic
	     then begin			!     for when ^H doesn't count
		moveforward(1);			! pass the position
		if .linpos gtr 1		! and decrement
		 then linpos _ .linpos - 1;	! if anything there
		blankctr _ 1			! set spacing flag
	     end
	     else gathertoken( 1 );	!     else treat as normal break

	tes
     end;
    if scann(hptr) eql " "		! remove extra spaces
     then delforward();			!  at the end
    while scann(lowptr) eql " "		! in both directions.
     do delbackward();
 end;

! metaj is the code for the META-X JUSTIFY TEXT command.  this routine
! positions the cursor to the start of the paragraph, and calls JUST to
! justify it.

global routine metaj = begin
	local leftmar,rightmar,topara,fbr;
	rightmar _ (if .repcount gtr 1 then .repcount else .iudent);
	leftmar  _ (if .indent geq 0 then .indent else 0);
	repcount _ 1;
	if .lowend eql 1 and (.hend-.hbot eql 0) then
		return ToPrompt(plit asciz 'Empty File');
	topara _ .lowend;
	ctrla();

	while 1 do begin			! so we can exitloop
	 if eolBreak(scann(hptr)) then begin
	    do ctrln2() while eolBreak(scann(hptr)) and .hbot lss .hend;
	    while fmtBreak(scann(hptr)) do ctrln2();
	    if eolBreak(scann(hptr)) or fmtBreak(scann(hptr)) then begin
		 moveback(.lowend-.topara);
		 return ToPrompt(plit asciz 'Nothing to Justify')
		 end
	    else exitloop
	    end;
	 if fmtBreak(scann(hptr)) then begin
		do ctrln2() while fmtBreak(scann(hptr)) and .hbot lss .hend;
		if apbreak(.lowend) or eolBreak(scann(hptr)) then begin
		     moveback(.lowend-.topara);
		     do ctrlp2() while fmtBreak(scann(hptr)) and .lowend gtr 1;
		     if eolBreak(scann(hptr)) or
		        fmtBreak(scann(hptr)) then begin
			   moveforward(.topara-.lowend);
		  	   return ToPrompt(plit asciz 'Nothing to Justify')
			   end
		     end
		end;
	 fbr _ findbreak(.lowend);
	 if .fbr lss .lowend then moveback(.lowend - .fbr);
	 while fmtBreak(scann(hptr)) and .hbot lss .hend do ctrln2();
	 if eolBreak(scann(hptr)) then begin
		moveforward(.topara-.lowend);
		return ToPrompt(plit asciz 'Nothing to Justify')
		end
	 else exitloop
	end;

	just(.leftmar,.rightmar);

	if .hend - .hbot eql 1 then
	    if eolBreak(scann(hptr)) then ctrlf();
	muline _ 1;
	scrmod _ 1
	end;

routine lftrgtpos = begin
    local lowsave, linpos, char;
    linpos_ .repcount;
    repcount_ 1;
    if .linpos leq 1
     then begin
	lowsave_ .lowend;
	ctrla();
	if .lowend eql .lowsave
	 then return 1;
	linpos_ 1;
	char_ scann(hptr);
	incr i from .lowend to .lowsave-1
	 do begin
	    if .bsback and .char eql "?H"
	     then linpos_ if .linpos gtr 1
			 then .linpos - 1
			 else .linpos
	     else linpos_ updatecursor(.char,.linpos);
	    char_ moveforward(1)
	 end
     end;
    return .linpos
end;

Global routine SetLft = indent_ lftrgtpos() - 1;
Global routine SetRgt = iudent_ lftrgtpos();

! fwdtovis moves forward until it hits a visible character

routine fwdtovis =
	until .hend eql .hbot or
	      not (eolBreak(scann(hptr)) or whtBreak(scann(hptr)) )
	 do moveforward(1);

routine tostartpar = begin
	until apbreak(.lowend) do ctrlp2();
	if fmtBreak(scann(hptr)) then ctrln2();
	fwdtovis()
	end;

routine uponepar = begin
	local blanksw,omark;
	blanksw _ 0;
	while 1 do begin
	  if .lowend eql 1 then return
	  else if fmtBreak(scann(hptr)) then ctrlp2()
	  else if eolBreak(scann(hptr)) eql 0 then return (ctrle())
	  else if .blanksw eql 1 then return(moveforward(.omark-.lowend))
	  else begin
	  	blanksw _ 1;
	  	do ctrlp2() while eolBreak(scann(hptr)) and .lowend gtr 1;
	  	if fmtBreak(scann(hptr)) eql 0 then return(ctrle());
	  	ctrle();
	  	omark _ .lowend;
		ctrlp2()
	       end
	  end
	end;

! meta left bracket moves back to a paragraph break if within a paragraph,
! or up to the end of the preceding paragraph if at a break.

global routine metalb = begin
	local temp,atleft,breakleft,comleft;
	if .lowend eql 1 then return
	   else if .lowend eql 2 then return(moveback(1));

	atleft _ 0;		!cursor at first printing char of line ?
	while 1 do begin
	     moveback(1);
	     temp _ scann(hptr);
	     if eolbreak( .temp ) then begin
		  atleft _ 1;
		  moveforward(1);
		  exitloop
		  end
	     else if .lowend eql 1 or not whtbreak(.temp)
	     	     then exitloop
	     end;

	ctrla();			!start on a paragraph break?
	breakleft _ apbreak(.lowend);

	comleft _ fmtBreak(scann(hptr));	!start on a Scribe command ?

	if .atleft eql 0 then	!inside a line?
	   if .comleft eql 0 then return(tostartpar())
	   else begin
	   	 do ctrlp2() while fmtBreak(scann(hptr)) and .lowend gtr 1;
		 if eolBreak(scann(hptr)) then begin
		 	ctrln2();
		 	return(fwdtovis())
		 	end
		 else return(ctrle())
		end;
	if .breakleft eql 0 then begin		!inside a paragraph?
	   ctrlp2();
	   if fmtBreak(scann(hptr)) eql 0 then return(tostartpar())
	   else return(uponepar());
	   end;
	if .comleft eql 0 then begin ctrlp2(); return(uponepar()) end;
	ctrlp2();
	if fmtBreak(scann(hptr)) or eolBreak(scann(hptr))
	 then return(uponepar())
	 else return(ctrle())
	end;	!the routine


routine toendpar = begin
	do ctrln2() until apbreak(.lowend) or eolBreak(scann(hptr)) or
				 .hend eql .hbot;
	if .hbot lss .hend then ctrlp2();
	ctrle()
	end;

routine downonepar = begin
	local blanksw,omark;
	blanksw _ eolBreak(scann(hptr));
	while 1 do begin
	    ctrln2();
	    if .hend eql .hbot then return
	    else if eolBreak(scann(hptr)) then
		    if .blanksw eql 2 then return(moveback(.lowend-.omark))
		    else if .blanksw eql 0 then blanksw _ 1
		    else 0
	    else if fmtBreak(scann(hptr)) eql 0 then return(fwdtovis())
	    else if .blanksw eql 1 then begin
		omark _ .lowend;
		blanksw _ 2
	    	end
	    end
	end;


! meta right bracket moves down to the end of a paragraph, if within a
! paragraph, or to the beginning of the next one if already at the end

global routine metarb = begin
	local opos,editp;
	opos _ .lowend;
	ctrla();
	while eolBreak(scann(hptr)) and .hbot lss .hend do ctrln2();
	editp _ fmtBreak(scann(hptr));
	ctrle();

	if .lowend gtr .opos then	!not at line end ?
	    if .editp eql 0 then return(toendpar())
	    else begin
		ctrla();
		while fmtBreak(scann(hptr)) and .hend neq .hbot do
		    ctrln2();
		if .hend eql .hbot then return (ctrle())
		else if eolBreak(scann(hptr)) then begin
		    ctrlp2();
		    return(ctrle())
		    end
		else return (fwdtovis());
		end;
	ctrln2();
	if apbreak(.lowend) or eolBreak(scann(hptr)) then downonepar()
	    else toendpar()
	end;


end eludom
    