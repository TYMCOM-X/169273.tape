module modes = begin

bind keyequal= ((plit asciz'=') )<36,7>;
bind commentstring= ((plit asciz'!') )<36,7>;
bind keythen= ((plit asciz'then') )<36,7>;
bind keyend= ((plit asciz'end') )<36,7>;
bind keybegin= ((plit asciz 'begin'))<36,7>;
bind keydo=((plit asciz 'do'))<36,7>;
bind keyof=((plit asciz 'of'))<36,7>;
bind keyset=((plit asciz'set'))<36,7>;
bind keyelse=((plit asciz'else'))<36,7>;

bind MetaValue=#200,  CtrlxValue=#400;
bind abbrevsize=2000, abbrevs=100;

own xiudent;
own abbrevspace[AbbrevSize/5+2],abold[abbrevs],abnew[abbrevs],absp;
own abnsize[abbrevs],abosize[abbrevs],abfreep,abssize;

external insertchar,toprompt,writestring,writeloss;
external lowend,getchxr,ctrlg,approc,repcount,setproc,rubout;
external munchline,munchnnl,whitespace,escvalue;
external iudent,spacect,tabwidth,indend,commentpos;
external distbl,hend,hbot,lowend,lowptr,hptr;
external eolbreak,wbreak,untabline,tabline,getindent,setindent;
external ctrln2,ctrlp2,moveforward,delbackward,delforward;
external tabsize,metab,ctrla,updatecursor,moveback,ctrle,bfblk1;
external filescan,initdispatch;

global routine abspace = begin
    local tp,bp,tc;

    incr i from 0 to .absp-1 do begin  !once per abbrev.
	if .abosize[.i] eql 0 then exitcompound;
	tp_.abold[.i];
	bp_.lowend-.abosize[.i]-1;
	!Now check for a word break.
	if .abosize[.i] lss .lowend-1 then begin
	    if not whitespace(getchxr(.bp)) then
		exitcompound[2];
	end;
	incr j from 1 to .abosize[.i] do begin
	    tc_scani(tp);
	    if .tc neq getchxr(.bp+.j) then exitcompound[2];
	end;
	! Here we have found an abbreviation.
	! it is in register .i
	incr j from 1 to .abosize[.i] do rubout();  !zap it.
	tp_.abnew[.i];		       !where to start.
	incr j from 1 to .abnsize[.i] do begin
	    tc_scani(tp);
	    insertchar(.tc);	       !insert it.
	end;
	return;
    end;
    return -1;			       !not found.
end;
global routine abreset = begin
    abssize_0;
    absp_0;
    abfreep_(abbrevspace)<36,7>
end;


global routine findab(aab) = begin	       !find an abbrev.
    local tp,bp,tc;

    incr i from 0 to .absp-1 do begin  !once per abbrev.
	tp_.abold[.i];
	bp_.lowend-.abosize-1;
	if ..aab neq .abosize[.i] then exitcompound[1];
	incr j from 1 to .abosize[.i] do begin
	    tc_scani(tp);
	    if .tc neq .((.aab)[.j]) then exitcompound[2];
	end;
	! Here we have found an abbreviation.
	! it is in .i
	return .i;
    end;
    return -1;			       !not found.
end;

global routine abdefine = begin
    local tp,tc,line[132];

    if .repcount eql 4 then begin
	repcount_1;
	return abreset();
    end;

    if .absp geq abbrevs then begin
	ToPrompt(plit asciz'Too many abbreviations.');
	return;
    end;
    ToPrompt(plit asciz'');
    munchnnl(line,plit asciz'Abbreviation <esc>: ',.EscValue);
    tp_findab(line);
    if .tp neq -1 then abosize[.tp]_0; !delete any already existing abbrev.
    tp_.abfreep;		       !first free byte.
    abold[.absp]_.tp;		       !remember it.
    incr k from 1 to .line do begin   !read in the data.
	replacei(tp,.line[.k]);!dump it in.
	if .abssize geq abbrevsize then begin
	    ToPrompt(plit asciz'Too many chars in abbreviations');
	    return;
	end;
	abssize_.abssize+1;
    end;
    abosize[.absp]_.line;	       !set the count.
    munchnnl(line,plit asciz' will be expanded to <esc>: ',.EscValue);
    WriteLoss("$");
    abnew[.absp]_.tp;		       !and again do so.
    incr k from 1 to .line do begin    !read in the data.
	replacei(tp,.line[.k]);	       !dump it in.
	if .abssize geq abbrevsize then begin
	    ToPrompt(plit asciz'Too many chars in abbreviations');
	    return;
	end;
	abssize_.abssize+1;
    end;
    abnsize[.absp]_.line;
    abfreep_.tp;
    absp_.absp+1;
end;

global routine abinit = begin
    abreset();
    setproc(CtrlXValue+"?A",abdefine);
    approc("?J",abspace);   approc("?M",abspace);
    approc(" ",abspace);    approc("!",abspace);
    approc("""",abspace);   approc("#",abspace);
    approc("$",abspace);    approc("%",abspace);
    approc("&",abspace);    approc("'",abspace);
    approc("(",abspace);    approc(")",abspace);
    approc("*",abspace);    approc("+",abspace);
    approc(",",abspace);    approc("-",abspace);
    approc(".",abspace);    approc("/",abspace);
    approc(":",abspace);    approc(";",abspace);
    approc("<",abspace);    approc("=",abspace);
    approc(">",abspace);    approc("??",abspace);
    approc("@",abspace);    approc("`",abspace);
    approc("[",abspace);    approc("\",abspace);
    approc("]",abspace);    approc("^",abspace);
    approc("_",abspace);    approc("{",abspace);
    approc("|",abspace);    approc("}",abspace);
    approc("~",abspace);
end;

Global Routine docomment = begin local temp,goal;
    ctrla();
    temp_1;
    while .hbot neq .hend
     do begin
	if eolBreak(scann(hptr)) then exitloop;
	temp_updatecursor(scann(hptr),.temp);
	moveforward()
     end;
    goal_.commentpos;			!the goal place to go.
    while .temp gtr .goal do goal_.goal + .tabwidth;
    while 1 do begin
	if .goal leq .temp then exitloop;
	if .goal-.temp lss .tabsize
	 then begin
	    insertchar(" ");
	    temp_.temp+1
	 end
	 else begin
	    insertchar("?I");
	    temp_updatecursor("?I",.temp)
	 end
     end;
    insertchar("!")
end;

Global Routine stringp (astring,wordp) = begin local tc,tp,cpos;

! This routine is used to decide if a keyword is on a line anywhere
! before the comment field.

    if .wordp and
       .lowend neq 1 and
       not wbreak(scann(lowptr))
     then return 0;			! if it is a trailer of a word.

    cpos_.lowend;			!first char
    tp_.astring;

    while 1 do begin
	tc_scani(tp);
	if .tc eql 0 then exitloop;
	if getchxr(.cpos) neq .tc then return 0;
	cpos_.cpos+1
     end;

    if (.wordp and not wbreak(getchxr(.cpos))) and
	.cpos-.lowend neq .hbot-.hend
     then return 0;

    return 1
end;

Global Routine linep (keyword)= begin local tp;

! This routine is used to test if the LAST keyword on a line
! is the magic keyword being searched for.

    tp_.keyword;
    ctrla();	!get to the left margin
    if .hend eql .hbot or eolBreak(scann(hptr))
     then return 0;
    while 1 do begin			!do the check for the whole line
	if stringp(.tp,1) then return 1;
	if stringp(commentstring,0) then return 0;
	if .hend eql .hbot then return 0;
	if eolBreak(scann(hptr)) then return 0;
	moveforward(1)
    end
end;

Global Routine elinep (keyword) = begin local nblank,tp;
    tp_.keyword;
    nblank_0;
    ctrla();
    if .hend eql .hbot or eolBreak(scann(hptr))
     then return 0;
    while 1 do begin
	if stringp(commentstring,0) then exitloop;
	if .hend eql .hbot then exitloop;
	if eolBreak(scann(hptr)) then exitloop;
	if not wbreak(scann(hptr)) then nblank_1;
	moveforward(1)
     end;
    if .nblank then metab();
    if stringp(.tp,1) then return 1;
end;

Global Routine mylf  = begin local endflag,tc;
    endflag_0;
    xiudent_0;
    ctrla();
    while not eolbreak(scann(hptr))
     do begin
	if .hend eql .hbot then exitloop;
	if not whitespace(scann(hptr)) then exitloop;
	moveforward(1)
    end;
    if .hend eql .hbot or
       eolBreak(scann(hptr))
     then begin
	ctrla();
	insertchar("?M");
	ctrle();
	return
    end;
    if linep(keyend) then begin
	xiudent_if .indend then -1 else 0;
	endflag_1
    end
    else if elinep(keythen) or elinep(keyequal) or
	    elinep(keydo) or elinep(keyof) or
	    elinep(keyset) or elinep(keyelse)
	  then xiudent_1;
    ctrla();
    if .lowend neq 1 then begin
	ctrlp2();			!if there is a line, go back to it
	if elinep(keythen) or elinep(keyelse) or
	   elinep(keyequal) or elinep(keydo)
	 then xiudent_.xiudent-1;
	ctrln2();
     end;

    if linep(keybegin) then xiudent_1;

    if .endflag and not .indend then untabline();

    spacect_ GetIndent(0) + (.tabwidth * .xiudent);
    if .spacect lss 0 then spacect_0;

    ctrle();
    insertchar("?M");
    SetIndent( .spacect );		!do the indentation.
end;

Global Routine metam = begin local tp,glbuffer[100],thack;
    external Toprompt,Abinit,Getstr,Errstr;
    external flush,modblk,jstins;

    Global Routine text = jstins_ 1;

    Global Routine Bliss = begin
	setproc("?J",mylf);
	(@distbl)[MetaValue+"1"]_docomment;
    end;

    flush_0;
    ToPrompt(plit asciz 'Mode Package: ');
    tp_(glbuffer)<36,7>;
    getstr(.tp);
    thack_.(modblk+1);
    if not (filescan (tp,modblk)) then return ctrlg();
    if .flush then return ctrlg();
    return  Select .(modblk+1) of NSET
	sixbit'bliss':		bliss();
	sixbit'text':		text();
	sixbit'abbrev':		abinit();
	sixbit'init':		initdispatch();
	Otherwise:
	    Begin
	(modblk+1)_.thack;
	ErrStr(plit asciz'Bad mode, one of (bliss text init abbrev)');
	    end;
    TESN;
end;

end eludom
 